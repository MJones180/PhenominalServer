# import Query, Event, EventOrderByInput, User from "./generated/prisma.graphql"

type Mutation {
  addFunds(amount: Int!, token: String!): addFundsPayload
  charitySuggestion(ein: String, email: String!, name: String!, representative: Boolean, url: String): Boolean
  contactMessage(email: String!, message: String!, name: String!): Boolean
  donation(amount: Int!, events: [ID!]): donationPayload
  signin(provider: String!, token: String!): signinPayload!
  updateUser(email: String, nameFirst: String, nameLast: String, username: String, allowDonationEmails: Boolean, securityToken: Boolean): Boolean
}

type Query {
  aggregateDonations(forEvent: String, forUser: Boolean): aggregateDonationsPayload!
  currentUser: User
  currentUserBalance: Int!
  eventsCurrent(charityEIN: String, orderBy: EventOrderByInput, first: Int, last: Int): [Event!]
  eventsPast(charityEIN: String, orderBy: EventOrderByInput, first: Int, last: Int): [Event!]
  eventsUpcoming(charityEIN: String, orderBy: EventOrderByInput, first: Int, last: Int): [Event!]
  userDots(username: String): Int!
  userLoops(username: String): Int!
}

type addFundsPayload {
  amountCharged: Int!
  amountReceived: Int!
  balance: Int!
  transactionID: ID!
}

type donationPayload {
  amount: Int!
  balances: [Int!]
  events: [String!]
  ids: [ID!]
}

type signinPayload {
  authToken: String!
  email: String
  id: String!
  isNewUser: Boolean
  nameFirst: String
  nameLast: String
  username: String
}

type aggregateDonationsPayload {
  count: Int!
  total: Int!
}
