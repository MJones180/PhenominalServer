# import Query, Event, EventOrderByInput, User from "./generated/prisma.graphql"

scalar Upload

type Mutation {
  accountAgeHalo: Boolean
  addFunds(amount: Int!, token: String!): addFundsPayload
  charityAuthLink(email: String!): Boolean
  charityCreate(ein: String!, email: String!, name: String!, representative: String!, url: String!): Boolean
  charitySignin(token: String!): String!
  charityStripeConnect(code: String!, state: String!, token: String!): Boolean
  charitySuggestion(ein: String, email: String!, name: String!, url: String): Boolean
  charityUpdate(token: String!, acronym: String, banner: Upload, bannerCredit: String, email: String, expensesAdministrative: Float, expensesFundraising: Float, expensesOther: Float, expensesProgram: Float, expensesUpdated: String, location: String, logo: Upload, mission: String, name: String, phoneNumber: String, representative: String, website: String): Boolean
  contactMessage(email: String!, message: String!, name: String!): Boolean
  createCircle(description: String, name: String!, open: Boolean): ID
  disbandCircle(id: ID!): Boolean
  donation(amount: Int!, eventID: ID!): donationPayload
  handleCircleInvite(id: ID!, join: Boolean!): Boolean
  handleCircleRequest(id: ID!, username: String!, accept: Boolean!): Boolean
  inviteCircleMember(id: ID!, username: String!): Boolean
  kickCircleMember(id: ID!, username: String!): Boolean
  sendFriendInvite(email: String!, message: String!): Boolean
  setFollowCharityRelation(ein: String!, unfollow: Boolean): Boolean
  setCircleRelation(id: ID!, leave: Boolean): String
  signin(provider: String!, token: String!): signinPayload!
  stripeAccountView(token: String!): String!
  updateCircle(id: ID!, description: String, open: Boolean): Boolean
  updateUser(bio: String, email: String, nameFirst: String, nameLast: String, username: String, allowDonationEmails: Boolean, publicProfile: Boolean, securityToken: Boolean): Boolean
  updateUserPicture(picture: Upload!): Boolean
}

type Query {
  aggregateDonations(currentUser: Boolean, eventID: ID): aggregateDonationsPayload!
  allHalos: [allHalosPayload!]
  currentAuthCharity(token: String!): String!
  currentUser: User
  currentUserBalance: Int!
  eventsCurrent(charityEIN: String, orderBy: EventOrderByInput, first: Int, last: Int): [Event!]
  eventsPast(charityEIN: String, orderBy: EventOrderByInput, first: Int, last: Int): [Event!]
  eventsUpcoming(charityEIN: String, orderBy: EventOrderByInput, first: Int, last: Int): [Event!]
  newHaloAlert: Boolean
  userDots(username: String): Int!
  userHalos(username: String): [userHalosPayload!]
  userLoops(username: String): userLoopsPayload!
}

type addFundsPayload {
  amountCharged: Int!
  amountReceived: Int!
  balance: Int!
  date: DateTime!
  expiration: DateTime!
  transactionID: ID!
}

type donationPayload {
  amount: Int!
  balance: Int!
  charityName: String!
  date: DateTime!
  dotTotal: Int!
  dotsGained: Int!
  loopCount: Int!
  loopGained: Boolean!
  transactionID: ID!
}

type signinPayload {
  authToken: String!
  email: String
  id: String!
  isNewUser: Boolean
  nameFirst: String
  nameLast: String
  username: String
}

type aggregateDonationsPayload {
  count: Int!
  total: Int!
}

type allHalosPayload {
  key: String!
  tiers: [allHalosTierPayload!]
}

type allHalosTierPayload {
  description: String!
  dotReward: Int!
  tier: String!
}

type userLoopsPayload {
  min: Int
  rank: String
  boost: Int
  goal: Int
  count: Int!
}

type userHalosPayload {
  date: DateTime!
  description: String!
  key: String!
  tier: String!
}
