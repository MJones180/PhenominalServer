module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCharge {
  count: Int!
}

type AggregateCharity {
  count: Int!
}

type AggregateCharityAuthHistory {
  count: Int!
}

type AggregateCircle {
  count: Int!
}

type AggregateCircleInvite {
  count: Int!
}

type AggregateCircleJoinRequest {
  count: Int!
}

type AggregateDot {
  count: Int!
}

type AggregateEvent {
  count: Int!
}

type AggregateHalo {
  count: Int!
}

type AggregateIdentity {
  count: Int!
}

type AggregateLoop {
  count: Int!
}

type AggregatePreferences {
  count: Int!
}

type AggregateTransaction {
  count: Int!
}

type AggregateTransfer {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Charge {
  id: ID!
  createdAt: DateTime!
  amountAdded: Int!
  amountNet: Int!
  chargeID: String!
  donations(where: TransferWhereInput, orderBy: TransferOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transfer!]
  transaction: Transaction!
  user: User!
}

type ChargeConnection {
  pageInfo: PageInfo!
  edges: [ChargeEdge]!
  aggregate: AggregateCharge!
}

input ChargeCreateInput {
  id: ID
  amountAdded: Int!
  amountNet: Int!
  chargeID: String!
  donations: TransferCreateManyWithoutSourceInput
  transaction: TransactionCreateOneWithoutFundsInput!
  user: UserCreateOneWithoutFundsInput!
}

input ChargeCreateManyWithoutUserInput {
  create: [ChargeCreateWithoutUserInput!]
  connect: [ChargeWhereUniqueInput!]
}

input ChargeCreateOneWithoutDonationsInput {
  create: ChargeCreateWithoutDonationsInput
  connect: ChargeWhereUniqueInput
}

input ChargeCreateOneWithoutTransactionInput {
  create: ChargeCreateWithoutTransactionInput
  connect: ChargeWhereUniqueInput
}

input ChargeCreateWithoutDonationsInput {
  id: ID
  amountAdded: Int!
  amountNet: Int!
  chargeID: String!
  transaction: TransactionCreateOneWithoutFundsInput!
  user: UserCreateOneWithoutFundsInput!
}

input ChargeCreateWithoutTransactionInput {
  id: ID
  amountAdded: Int!
  amountNet: Int!
  chargeID: String!
  donations: TransferCreateManyWithoutSourceInput
  user: UserCreateOneWithoutFundsInput!
}

input ChargeCreateWithoutUserInput {
  id: ID
  amountAdded: Int!
  amountNet: Int!
  chargeID: String!
  donations: TransferCreateManyWithoutSourceInput
  transaction: TransactionCreateOneWithoutFundsInput!
}

type ChargeEdge {
  node: Charge!
  cursor: String!
}

enum ChargeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  amountAdded_ASC
  amountAdded_DESC
  amountNet_ASC
  amountNet_DESC
  chargeID_ASC
  chargeID_DESC
}

type ChargePreviousValues {
  id: ID!
  createdAt: DateTime!
  amountAdded: Int!
  amountNet: Int!
  chargeID: String!
}

input ChargeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  amountAdded: Int
  amountAdded_not: Int
  amountAdded_in: [Int!]
  amountAdded_not_in: [Int!]
  amountAdded_lt: Int
  amountAdded_lte: Int
  amountAdded_gt: Int
  amountAdded_gte: Int
  amountNet: Int
  amountNet_not: Int
  amountNet_in: [Int!]
  amountNet_not_in: [Int!]
  amountNet_lt: Int
  amountNet_lte: Int
  amountNet_gt: Int
  amountNet_gte: Int
  chargeID: String
  chargeID_not: String
  chargeID_in: [String!]
  chargeID_not_in: [String!]
  chargeID_lt: String
  chargeID_lte: String
  chargeID_gt: String
  chargeID_gte: String
  chargeID_contains: String
  chargeID_not_contains: String
  chargeID_starts_with: String
  chargeID_not_starts_with: String
  chargeID_ends_with: String
  chargeID_not_ends_with: String
  AND: [ChargeScalarWhereInput!]
  OR: [ChargeScalarWhereInput!]
  NOT: [ChargeScalarWhereInput!]
}

type ChargeSubscriptionPayload {
  mutation: MutationType!
  node: Charge
  updatedFields: [String!]
  previousValues: ChargePreviousValues
}

input ChargeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ChargeWhereInput
  AND: [ChargeSubscriptionWhereInput!]
  OR: [ChargeSubscriptionWhereInput!]
  NOT: [ChargeSubscriptionWhereInput!]
}

input ChargeUpdateInput {
  amountAdded: Int
  amountNet: Int
  chargeID: String
  donations: TransferUpdateManyWithoutSourceInput
  transaction: TransactionUpdateOneRequiredWithoutFundsInput
  user: UserUpdateOneRequiredWithoutFundsInput
}

input ChargeUpdateManyDataInput {
  amountAdded: Int
  amountNet: Int
  chargeID: String
}

input ChargeUpdateManyMutationInput {
  amountAdded: Int
  amountNet: Int
  chargeID: String
}

input ChargeUpdateManyWithoutUserInput {
  create: [ChargeCreateWithoutUserInput!]
  delete: [ChargeWhereUniqueInput!]
  connect: [ChargeWhereUniqueInput!]
  set: [ChargeWhereUniqueInput!]
  disconnect: [ChargeWhereUniqueInput!]
  update: [ChargeUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ChargeUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ChargeScalarWhereInput!]
  updateMany: [ChargeUpdateManyWithWhereNestedInput!]
}

input ChargeUpdateManyWithWhereNestedInput {
  where: ChargeScalarWhereInput!
  data: ChargeUpdateManyDataInput!
}

input ChargeUpdateOneWithoutDonationsInput {
  create: ChargeCreateWithoutDonationsInput
  update: ChargeUpdateWithoutDonationsDataInput
  upsert: ChargeUpsertWithoutDonationsInput
  delete: Boolean
  disconnect: Boolean
  connect: ChargeWhereUniqueInput
}

input ChargeUpdateOneWithoutTransactionInput {
  create: ChargeCreateWithoutTransactionInput
  update: ChargeUpdateWithoutTransactionDataInput
  upsert: ChargeUpsertWithoutTransactionInput
  delete: Boolean
  disconnect: Boolean
  connect: ChargeWhereUniqueInput
}

input ChargeUpdateWithoutDonationsDataInput {
  amountAdded: Int
  amountNet: Int
  chargeID: String
  transaction: TransactionUpdateOneRequiredWithoutFundsInput
  user: UserUpdateOneRequiredWithoutFundsInput
}

input ChargeUpdateWithoutTransactionDataInput {
  amountAdded: Int
  amountNet: Int
  chargeID: String
  donations: TransferUpdateManyWithoutSourceInput
  user: UserUpdateOneRequiredWithoutFundsInput
}

input ChargeUpdateWithoutUserDataInput {
  amountAdded: Int
  amountNet: Int
  chargeID: String
  donations: TransferUpdateManyWithoutSourceInput
  transaction: TransactionUpdateOneRequiredWithoutFundsInput
}

input ChargeUpdateWithWhereUniqueWithoutUserInput {
  where: ChargeWhereUniqueInput!
  data: ChargeUpdateWithoutUserDataInput!
}

input ChargeUpsertWithoutDonationsInput {
  update: ChargeUpdateWithoutDonationsDataInput!
  create: ChargeCreateWithoutDonationsInput!
}

input ChargeUpsertWithoutTransactionInput {
  update: ChargeUpdateWithoutTransactionDataInput!
  create: ChargeCreateWithoutTransactionInput!
}

input ChargeUpsertWithWhereUniqueWithoutUserInput {
  where: ChargeWhereUniqueInput!
  update: ChargeUpdateWithoutUserDataInput!
  create: ChargeCreateWithoutUserInput!
}

input ChargeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  amountAdded: Int
  amountAdded_not: Int
  amountAdded_in: [Int!]
  amountAdded_not_in: [Int!]
  amountAdded_lt: Int
  amountAdded_lte: Int
  amountAdded_gt: Int
  amountAdded_gte: Int
  amountNet: Int
  amountNet_not: Int
  amountNet_in: [Int!]
  amountNet_not_in: [Int!]
  amountNet_lt: Int
  amountNet_lte: Int
  amountNet_gt: Int
  amountNet_gte: Int
  chargeID: String
  chargeID_not: String
  chargeID_in: [String!]
  chargeID_not_in: [String!]
  chargeID_lt: String
  chargeID_lte: String
  chargeID_gt: String
  chargeID_gte: String
  chargeID_contains: String
  chargeID_not_contains: String
  chargeID_starts_with: String
  chargeID_not_starts_with: String
  chargeID_ends_with: String
  chargeID_not_ends_with: String
  donations_every: TransferWhereInput
  donations_some: TransferWhereInput
  donations_none: TransferWhereInput
  transaction: TransactionWhereInput
  user: UserWhereInput
  AND: [ChargeWhereInput!]
  OR: [ChargeWhereInput!]
  NOT: [ChargeWhereInput!]
}

input ChargeWhereUniqueInput {
  id: ID
}

type Charity {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  acronym: String
  banner: String
  bannerCredit: String
  connectedAccountID: String
  ein: String!
  email: String!
  expensesAdministrative: Float
  expensesFundraising: Float
  expensesOther: Float
  expensesProgram: Float
  expensesUpdated: String
  location: String
  logo: String
  mission: String
  name: String!
  phoneNumber: String
  representative: String!
  verified: Boolean
  website: String!
  authHistory(where: CharityAuthHistoryWhereInput, orderBy: CharityAuthHistoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CharityAuthHistory!]
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  followers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type CharityAuthHistory {
  id: ID!
  createdAt: DateTime!
  charity: Charity!
}

type CharityAuthHistoryConnection {
  pageInfo: PageInfo!
  edges: [CharityAuthHistoryEdge]!
  aggregate: AggregateCharityAuthHistory!
}

input CharityAuthHistoryCreateInput {
  id: ID
  charity: CharityCreateOneWithoutAuthHistoryInput!
}

input CharityAuthHistoryCreateManyWithoutCharityInput {
  create: [CharityAuthHistoryCreateWithoutCharityInput!]
  connect: [CharityAuthHistoryWhereUniqueInput!]
}

input CharityAuthHistoryCreateWithoutCharityInput {
  id: ID
}

type CharityAuthHistoryEdge {
  node: CharityAuthHistory!
  cursor: String!
}

enum CharityAuthHistoryOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
}

type CharityAuthHistoryPreviousValues {
  id: ID!
  createdAt: DateTime!
}

input CharityAuthHistoryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [CharityAuthHistoryScalarWhereInput!]
  OR: [CharityAuthHistoryScalarWhereInput!]
  NOT: [CharityAuthHistoryScalarWhereInput!]
}

type CharityAuthHistorySubscriptionPayload {
  mutation: MutationType!
  node: CharityAuthHistory
  updatedFields: [String!]
  previousValues: CharityAuthHistoryPreviousValues
}

input CharityAuthHistorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CharityAuthHistoryWhereInput
  AND: [CharityAuthHistorySubscriptionWhereInput!]
  OR: [CharityAuthHistorySubscriptionWhereInput!]
  NOT: [CharityAuthHistorySubscriptionWhereInput!]
}

input CharityAuthHistoryUpdateInput {
  charity: CharityUpdateOneRequiredWithoutAuthHistoryInput
}

input CharityAuthHistoryUpdateManyWithoutCharityInput {
  create: [CharityAuthHistoryCreateWithoutCharityInput!]
  delete: [CharityAuthHistoryWhereUniqueInput!]
  connect: [CharityAuthHistoryWhereUniqueInput!]
  set: [CharityAuthHistoryWhereUniqueInput!]
  disconnect: [CharityAuthHistoryWhereUniqueInput!]
  deleteMany: [CharityAuthHistoryScalarWhereInput!]
}

input CharityAuthHistoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  charity: CharityWhereInput
  AND: [CharityAuthHistoryWhereInput!]
  OR: [CharityAuthHistoryWhereInput!]
  NOT: [CharityAuthHistoryWhereInput!]
}

input CharityAuthHistoryWhereUniqueInput {
  id: ID
}

type CharityConnection {
  pageInfo: PageInfo!
  edges: [CharityEdge]!
  aggregate: AggregateCharity!
}

input CharityCreateInput {
  id: ID
  acronym: String
  banner: String
  bannerCredit: String
  connectedAccountID: String
  ein: String!
  email: String!
  expensesAdministrative: Float
  expensesFundraising: Float
  expensesOther: Float
  expensesProgram: Float
  expensesUpdated: String
  location: String
  logo: String
  mission: String
  name: String!
  phoneNumber: String
  representative: String!
  verified: Boolean
  website: String!
  authHistory: CharityAuthHistoryCreateManyWithoutCharityInput
  events: EventCreateManyWithoutCharityInput
  followers: UserCreateManyWithoutFollowedCharitiesInput
}

input CharityCreateManyWithoutFollowersInput {
  create: [CharityCreateWithoutFollowersInput!]
  connect: [CharityWhereUniqueInput!]
}

input CharityCreateOneWithoutAuthHistoryInput {
  create: CharityCreateWithoutAuthHistoryInput
  connect: CharityWhereUniqueInput
}

input CharityCreateOneWithoutEventsInput {
  create: CharityCreateWithoutEventsInput
  connect: CharityWhereUniqueInput
}

input CharityCreateWithoutAuthHistoryInput {
  id: ID
  acronym: String
  banner: String
  bannerCredit: String
  connectedAccountID: String
  ein: String!
  email: String!
  expensesAdministrative: Float
  expensesFundraising: Float
  expensesOther: Float
  expensesProgram: Float
  expensesUpdated: String
  location: String
  logo: String
  mission: String
  name: String!
  phoneNumber: String
  representative: String!
  verified: Boolean
  website: String!
  events: EventCreateManyWithoutCharityInput
  followers: UserCreateManyWithoutFollowedCharitiesInput
}

input CharityCreateWithoutEventsInput {
  id: ID
  acronym: String
  banner: String
  bannerCredit: String
  connectedAccountID: String
  ein: String!
  email: String!
  expensesAdministrative: Float
  expensesFundraising: Float
  expensesOther: Float
  expensesProgram: Float
  expensesUpdated: String
  location: String
  logo: String
  mission: String
  name: String!
  phoneNumber: String
  representative: String!
  verified: Boolean
  website: String!
  authHistory: CharityAuthHistoryCreateManyWithoutCharityInput
  followers: UserCreateManyWithoutFollowedCharitiesInput
}

input CharityCreateWithoutFollowersInput {
  id: ID
  acronym: String
  banner: String
  bannerCredit: String
  connectedAccountID: String
  ein: String!
  email: String!
  expensesAdministrative: Float
  expensesFundraising: Float
  expensesOther: Float
  expensesProgram: Float
  expensesUpdated: String
  location: String
  logo: String
  mission: String
  name: String!
  phoneNumber: String
  representative: String!
  verified: Boolean
  website: String!
  authHistory: CharityAuthHistoryCreateManyWithoutCharityInput
  events: EventCreateManyWithoutCharityInput
}

type CharityEdge {
  node: Charity!
  cursor: String!
}

enum CharityOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  acronym_ASC
  acronym_DESC
  banner_ASC
  banner_DESC
  bannerCredit_ASC
  bannerCredit_DESC
  connectedAccountID_ASC
  connectedAccountID_DESC
  ein_ASC
  ein_DESC
  email_ASC
  email_DESC
  expensesAdministrative_ASC
  expensesAdministrative_DESC
  expensesFundraising_ASC
  expensesFundraising_DESC
  expensesOther_ASC
  expensesOther_DESC
  expensesProgram_ASC
  expensesProgram_DESC
  expensesUpdated_ASC
  expensesUpdated_DESC
  location_ASC
  location_DESC
  logo_ASC
  logo_DESC
  mission_ASC
  mission_DESC
  name_ASC
  name_DESC
  phoneNumber_ASC
  phoneNumber_DESC
  representative_ASC
  representative_DESC
  verified_ASC
  verified_DESC
  website_ASC
  website_DESC
}

type CharityPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  acronym: String
  banner: String
  bannerCredit: String
  connectedAccountID: String
  ein: String!
  email: String!
  expensesAdministrative: Float
  expensesFundraising: Float
  expensesOther: Float
  expensesProgram: Float
  expensesUpdated: String
  location: String
  logo: String
  mission: String
  name: String!
  phoneNumber: String
  representative: String!
  verified: Boolean
  website: String!
}

input CharityScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  acronym: String
  acronym_not: String
  acronym_in: [String!]
  acronym_not_in: [String!]
  acronym_lt: String
  acronym_lte: String
  acronym_gt: String
  acronym_gte: String
  acronym_contains: String
  acronym_not_contains: String
  acronym_starts_with: String
  acronym_not_starts_with: String
  acronym_ends_with: String
  acronym_not_ends_with: String
  banner: String
  banner_not: String
  banner_in: [String!]
  banner_not_in: [String!]
  banner_lt: String
  banner_lte: String
  banner_gt: String
  banner_gte: String
  banner_contains: String
  banner_not_contains: String
  banner_starts_with: String
  banner_not_starts_with: String
  banner_ends_with: String
  banner_not_ends_with: String
  bannerCredit: String
  bannerCredit_not: String
  bannerCredit_in: [String!]
  bannerCredit_not_in: [String!]
  bannerCredit_lt: String
  bannerCredit_lte: String
  bannerCredit_gt: String
  bannerCredit_gte: String
  bannerCredit_contains: String
  bannerCredit_not_contains: String
  bannerCredit_starts_with: String
  bannerCredit_not_starts_with: String
  bannerCredit_ends_with: String
  bannerCredit_not_ends_with: String
  connectedAccountID: String
  connectedAccountID_not: String
  connectedAccountID_in: [String!]
  connectedAccountID_not_in: [String!]
  connectedAccountID_lt: String
  connectedAccountID_lte: String
  connectedAccountID_gt: String
  connectedAccountID_gte: String
  connectedAccountID_contains: String
  connectedAccountID_not_contains: String
  connectedAccountID_starts_with: String
  connectedAccountID_not_starts_with: String
  connectedAccountID_ends_with: String
  connectedAccountID_not_ends_with: String
  ein: String
  ein_not: String
  ein_in: [String!]
  ein_not_in: [String!]
  ein_lt: String
  ein_lte: String
  ein_gt: String
  ein_gte: String
  ein_contains: String
  ein_not_contains: String
  ein_starts_with: String
  ein_not_starts_with: String
  ein_ends_with: String
  ein_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  expensesAdministrative: Float
  expensesAdministrative_not: Float
  expensesAdministrative_in: [Float!]
  expensesAdministrative_not_in: [Float!]
  expensesAdministrative_lt: Float
  expensesAdministrative_lte: Float
  expensesAdministrative_gt: Float
  expensesAdministrative_gte: Float
  expensesFundraising: Float
  expensesFundraising_not: Float
  expensesFundraising_in: [Float!]
  expensesFundraising_not_in: [Float!]
  expensesFundraising_lt: Float
  expensesFundraising_lte: Float
  expensesFundraising_gt: Float
  expensesFundraising_gte: Float
  expensesOther: Float
  expensesOther_not: Float
  expensesOther_in: [Float!]
  expensesOther_not_in: [Float!]
  expensesOther_lt: Float
  expensesOther_lte: Float
  expensesOther_gt: Float
  expensesOther_gte: Float
  expensesProgram: Float
  expensesProgram_not: Float
  expensesProgram_in: [Float!]
  expensesProgram_not_in: [Float!]
  expensesProgram_lt: Float
  expensesProgram_lte: Float
  expensesProgram_gt: Float
  expensesProgram_gte: Float
  expensesUpdated: String
  expensesUpdated_not: String
  expensesUpdated_in: [String!]
  expensesUpdated_not_in: [String!]
  expensesUpdated_lt: String
  expensesUpdated_lte: String
  expensesUpdated_gt: String
  expensesUpdated_gte: String
  expensesUpdated_contains: String
  expensesUpdated_not_contains: String
  expensesUpdated_starts_with: String
  expensesUpdated_not_starts_with: String
  expensesUpdated_ends_with: String
  expensesUpdated_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  logo: String
  logo_not: String
  logo_in: [String!]
  logo_not_in: [String!]
  logo_lt: String
  logo_lte: String
  logo_gt: String
  logo_gte: String
  logo_contains: String
  logo_not_contains: String
  logo_starts_with: String
  logo_not_starts_with: String
  logo_ends_with: String
  logo_not_ends_with: String
  mission: String
  mission_not: String
  mission_in: [String!]
  mission_not_in: [String!]
  mission_lt: String
  mission_lte: String
  mission_gt: String
  mission_gte: String
  mission_contains: String
  mission_not_contains: String
  mission_starts_with: String
  mission_not_starts_with: String
  mission_ends_with: String
  mission_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  phoneNumber_lt: String
  phoneNumber_lte: String
  phoneNumber_gt: String
  phoneNumber_gte: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  representative: String
  representative_not: String
  representative_in: [String!]
  representative_not_in: [String!]
  representative_lt: String
  representative_lte: String
  representative_gt: String
  representative_gte: String
  representative_contains: String
  representative_not_contains: String
  representative_starts_with: String
  representative_not_starts_with: String
  representative_ends_with: String
  representative_not_ends_with: String
  verified: Boolean
  verified_not: Boolean
  website: String
  website_not: String
  website_in: [String!]
  website_not_in: [String!]
  website_lt: String
  website_lte: String
  website_gt: String
  website_gte: String
  website_contains: String
  website_not_contains: String
  website_starts_with: String
  website_not_starts_with: String
  website_ends_with: String
  website_not_ends_with: String
  AND: [CharityScalarWhereInput!]
  OR: [CharityScalarWhereInput!]
  NOT: [CharityScalarWhereInput!]
}

type CharitySubscriptionPayload {
  mutation: MutationType!
  node: Charity
  updatedFields: [String!]
  previousValues: CharityPreviousValues
}

input CharitySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CharityWhereInput
  AND: [CharitySubscriptionWhereInput!]
  OR: [CharitySubscriptionWhereInput!]
  NOT: [CharitySubscriptionWhereInput!]
}

input CharityUpdateInput {
  acronym: String
  banner: String
  bannerCredit: String
  connectedAccountID: String
  ein: String
  email: String
  expensesAdministrative: Float
  expensesFundraising: Float
  expensesOther: Float
  expensesProgram: Float
  expensesUpdated: String
  location: String
  logo: String
  mission: String
  name: String
  phoneNumber: String
  representative: String
  verified: Boolean
  website: String
  authHistory: CharityAuthHistoryUpdateManyWithoutCharityInput
  events: EventUpdateManyWithoutCharityInput
  followers: UserUpdateManyWithoutFollowedCharitiesInput
}

input CharityUpdateManyDataInput {
  acronym: String
  banner: String
  bannerCredit: String
  connectedAccountID: String
  ein: String
  email: String
  expensesAdministrative: Float
  expensesFundraising: Float
  expensesOther: Float
  expensesProgram: Float
  expensesUpdated: String
  location: String
  logo: String
  mission: String
  name: String
  phoneNumber: String
  representative: String
  verified: Boolean
  website: String
}

input CharityUpdateManyMutationInput {
  acronym: String
  banner: String
  bannerCredit: String
  connectedAccountID: String
  ein: String
  email: String
  expensesAdministrative: Float
  expensesFundraising: Float
  expensesOther: Float
  expensesProgram: Float
  expensesUpdated: String
  location: String
  logo: String
  mission: String
  name: String
  phoneNumber: String
  representative: String
  verified: Boolean
  website: String
}

input CharityUpdateManyWithoutFollowersInput {
  create: [CharityCreateWithoutFollowersInput!]
  delete: [CharityWhereUniqueInput!]
  connect: [CharityWhereUniqueInput!]
  set: [CharityWhereUniqueInput!]
  disconnect: [CharityWhereUniqueInput!]
  update: [CharityUpdateWithWhereUniqueWithoutFollowersInput!]
  upsert: [CharityUpsertWithWhereUniqueWithoutFollowersInput!]
  deleteMany: [CharityScalarWhereInput!]
  updateMany: [CharityUpdateManyWithWhereNestedInput!]
}

input CharityUpdateManyWithWhereNestedInput {
  where: CharityScalarWhereInput!
  data: CharityUpdateManyDataInput!
}

input CharityUpdateOneRequiredWithoutAuthHistoryInput {
  create: CharityCreateWithoutAuthHistoryInput
  update: CharityUpdateWithoutAuthHistoryDataInput
  upsert: CharityUpsertWithoutAuthHistoryInput
  connect: CharityWhereUniqueInput
}

input CharityUpdateOneRequiredWithoutEventsInput {
  create: CharityCreateWithoutEventsInput
  update: CharityUpdateWithoutEventsDataInput
  upsert: CharityUpsertWithoutEventsInput
  connect: CharityWhereUniqueInput
}

input CharityUpdateWithoutAuthHistoryDataInput {
  acronym: String
  banner: String
  bannerCredit: String
  connectedAccountID: String
  ein: String
  email: String
  expensesAdministrative: Float
  expensesFundraising: Float
  expensesOther: Float
  expensesProgram: Float
  expensesUpdated: String
  location: String
  logo: String
  mission: String
  name: String
  phoneNumber: String
  representative: String
  verified: Boolean
  website: String
  events: EventUpdateManyWithoutCharityInput
  followers: UserUpdateManyWithoutFollowedCharitiesInput
}

input CharityUpdateWithoutEventsDataInput {
  acronym: String
  banner: String
  bannerCredit: String
  connectedAccountID: String
  ein: String
  email: String
  expensesAdministrative: Float
  expensesFundraising: Float
  expensesOther: Float
  expensesProgram: Float
  expensesUpdated: String
  location: String
  logo: String
  mission: String
  name: String
  phoneNumber: String
  representative: String
  verified: Boolean
  website: String
  authHistory: CharityAuthHistoryUpdateManyWithoutCharityInput
  followers: UserUpdateManyWithoutFollowedCharitiesInput
}

input CharityUpdateWithoutFollowersDataInput {
  acronym: String
  banner: String
  bannerCredit: String
  connectedAccountID: String
  ein: String
  email: String
  expensesAdministrative: Float
  expensesFundraising: Float
  expensesOther: Float
  expensesProgram: Float
  expensesUpdated: String
  location: String
  logo: String
  mission: String
  name: String
  phoneNumber: String
  representative: String
  verified: Boolean
  website: String
  authHistory: CharityAuthHistoryUpdateManyWithoutCharityInput
  events: EventUpdateManyWithoutCharityInput
}

input CharityUpdateWithWhereUniqueWithoutFollowersInput {
  where: CharityWhereUniqueInput!
  data: CharityUpdateWithoutFollowersDataInput!
}

input CharityUpsertWithoutAuthHistoryInput {
  update: CharityUpdateWithoutAuthHistoryDataInput!
  create: CharityCreateWithoutAuthHistoryInput!
}

input CharityUpsertWithoutEventsInput {
  update: CharityUpdateWithoutEventsDataInput!
  create: CharityCreateWithoutEventsInput!
}

input CharityUpsertWithWhereUniqueWithoutFollowersInput {
  where: CharityWhereUniqueInput!
  update: CharityUpdateWithoutFollowersDataInput!
  create: CharityCreateWithoutFollowersInput!
}

input CharityWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  acronym: String
  acronym_not: String
  acronym_in: [String!]
  acronym_not_in: [String!]
  acronym_lt: String
  acronym_lte: String
  acronym_gt: String
  acronym_gte: String
  acronym_contains: String
  acronym_not_contains: String
  acronym_starts_with: String
  acronym_not_starts_with: String
  acronym_ends_with: String
  acronym_not_ends_with: String
  banner: String
  banner_not: String
  banner_in: [String!]
  banner_not_in: [String!]
  banner_lt: String
  banner_lte: String
  banner_gt: String
  banner_gte: String
  banner_contains: String
  banner_not_contains: String
  banner_starts_with: String
  banner_not_starts_with: String
  banner_ends_with: String
  banner_not_ends_with: String
  bannerCredit: String
  bannerCredit_not: String
  bannerCredit_in: [String!]
  bannerCredit_not_in: [String!]
  bannerCredit_lt: String
  bannerCredit_lte: String
  bannerCredit_gt: String
  bannerCredit_gte: String
  bannerCredit_contains: String
  bannerCredit_not_contains: String
  bannerCredit_starts_with: String
  bannerCredit_not_starts_with: String
  bannerCredit_ends_with: String
  bannerCredit_not_ends_with: String
  connectedAccountID: String
  connectedAccountID_not: String
  connectedAccountID_in: [String!]
  connectedAccountID_not_in: [String!]
  connectedAccountID_lt: String
  connectedAccountID_lte: String
  connectedAccountID_gt: String
  connectedAccountID_gte: String
  connectedAccountID_contains: String
  connectedAccountID_not_contains: String
  connectedAccountID_starts_with: String
  connectedAccountID_not_starts_with: String
  connectedAccountID_ends_with: String
  connectedAccountID_not_ends_with: String
  ein: String
  ein_not: String
  ein_in: [String!]
  ein_not_in: [String!]
  ein_lt: String
  ein_lte: String
  ein_gt: String
  ein_gte: String
  ein_contains: String
  ein_not_contains: String
  ein_starts_with: String
  ein_not_starts_with: String
  ein_ends_with: String
  ein_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  expensesAdministrative: Float
  expensesAdministrative_not: Float
  expensesAdministrative_in: [Float!]
  expensesAdministrative_not_in: [Float!]
  expensesAdministrative_lt: Float
  expensesAdministrative_lte: Float
  expensesAdministrative_gt: Float
  expensesAdministrative_gte: Float
  expensesFundraising: Float
  expensesFundraising_not: Float
  expensesFundraising_in: [Float!]
  expensesFundraising_not_in: [Float!]
  expensesFundraising_lt: Float
  expensesFundraising_lte: Float
  expensesFundraising_gt: Float
  expensesFundraising_gte: Float
  expensesOther: Float
  expensesOther_not: Float
  expensesOther_in: [Float!]
  expensesOther_not_in: [Float!]
  expensesOther_lt: Float
  expensesOther_lte: Float
  expensesOther_gt: Float
  expensesOther_gte: Float
  expensesProgram: Float
  expensesProgram_not: Float
  expensesProgram_in: [Float!]
  expensesProgram_not_in: [Float!]
  expensesProgram_lt: Float
  expensesProgram_lte: Float
  expensesProgram_gt: Float
  expensesProgram_gte: Float
  expensesUpdated: String
  expensesUpdated_not: String
  expensesUpdated_in: [String!]
  expensesUpdated_not_in: [String!]
  expensesUpdated_lt: String
  expensesUpdated_lte: String
  expensesUpdated_gt: String
  expensesUpdated_gte: String
  expensesUpdated_contains: String
  expensesUpdated_not_contains: String
  expensesUpdated_starts_with: String
  expensesUpdated_not_starts_with: String
  expensesUpdated_ends_with: String
  expensesUpdated_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  logo: String
  logo_not: String
  logo_in: [String!]
  logo_not_in: [String!]
  logo_lt: String
  logo_lte: String
  logo_gt: String
  logo_gte: String
  logo_contains: String
  logo_not_contains: String
  logo_starts_with: String
  logo_not_starts_with: String
  logo_ends_with: String
  logo_not_ends_with: String
  mission: String
  mission_not: String
  mission_in: [String!]
  mission_not_in: [String!]
  mission_lt: String
  mission_lte: String
  mission_gt: String
  mission_gte: String
  mission_contains: String
  mission_not_contains: String
  mission_starts_with: String
  mission_not_starts_with: String
  mission_ends_with: String
  mission_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  phoneNumber_lt: String
  phoneNumber_lte: String
  phoneNumber_gt: String
  phoneNumber_gte: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  representative: String
  representative_not: String
  representative_in: [String!]
  representative_not_in: [String!]
  representative_lt: String
  representative_lte: String
  representative_gt: String
  representative_gte: String
  representative_contains: String
  representative_not_contains: String
  representative_starts_with: String
  representative_not_starts_with: String
  representative_ends_with: String
  representative_not_ends_with: String
  verified: Boolean
  verified_not: Boolean
  website: String
  website_not: String
  website_in: [String!]
  website_not_in: [String!]
  website_lt: String
  website_lte: String
  website_gt: String
  website_gte: String
  website_contains: String
  website_not_contains: String
  website_starts_with: String
  website_not_starts_with: String
  website_ends_with: String
  website_not_ends_with: String
  authHistory_every: CharityAuthHistoryWhereInput
  authHistory_some: CharityAuthHistoryWhereInput
  authHistory_none: CharityAuthHistoryWhereInput
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
  followers_every: UserWhereInput
  followers_some: UserWhereInput
  followers_none: UserWhereInput
  AND: [CharityWhereInput!]
  OR: [CharityWhereInput!]
  NOT: [CharityWhereInput!]
}

input CharityWhereUniqueInput {
  id: ID
  ein: String
  email: String
}

type Circle {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  description: String
  name: String!
  open: Boolean!
  joinRequests(where: CircleJoinRequestWhereInput, orderBy: CircleJoinRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CircleJoinRequest!]
  invites(where: CircleInviteWhereInput, orderBy: CircleInviteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CircleInvite!]
  members(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  owner: User!
}

type CircleConnection {
  pageInfo: PageInfo!
  edges: [CircleEdge]!
  aggregate: AggregateCircle!
}

input CircleCreateInput {
  id: ID
  description: String
  name: String!
  open: Boolean
  joinRequests: CircleJoinRequestCreateManyWithoutCircleInput
  invites: CircleInviteCreateManyWithoutCircleInput
  members: UserCreateManyWithoutCirclesInput
  owner: UserCreateOneWithoutCirclesOwnedInput!
}

input CircleCreateManyWithoutMembersInput {
  create: [CircleCreateWithoutMembersInput!]
  connect: [CircleWhereUniqueInput!]
}

input CircleCreateManyWithoutOwnerInput {
  create: [CircleCreateWithoutOwnerInput!]
  connect: [CircleWhereUniqueInput!]
}

input CircleCreateOneWithoutInvitesInput {
  create: CircleCreateWithoutInvitesInput
  connect: CircleWhereUniqueInput
}

input CircleCreateOneWithoutJoinRequestsInput {
  create: CircleCreateWithoutJoinRequestsInput
  connect: CircleWhereUniqueInput
}

input CircleCreateWithoutInvitesInput {
  id: ID
  description: String
  name: String!
  open: Boolean
  joinRequests: CircleJoinRequestCreateManyWithoutCircleInput
  members: UserCreateManyWithoutCirclesInput
  owner: UserCreateOneWithoutCirclesOwnedInput!
}

input CircleCreateWithoutJoinRequestsInput {
  id: ID
  description: String
  name: String!
  open: Boolean
  invites: CircleInviteCreateManyWithoutCircleInput
  members: UserCreateManyWithoutCirclesInput
  owner: UserCreateOneWithoutCirclesOwnedInput!
}

input CircleCreateWithoutMembersInput {
  id: ID
  description: String
  name: String!
  open: Boolean
  joinRequests: CircleJoinRequestCreateManyWithoutCircleInput
  invites: CircleInviteCreateManyWithoutCircleInput
  owner: UserCreateOneWithoutCirclesOwnedInput!
}

input CircleCreateWithoutOwnerInput {
  id: ID
  description: String
  name: String!
  open: Boolean
  joinRequests: CircleJoinRequestCreateManyWithoutCircleInput
  invites: CircleInviteCreateManyWithoutCircleInput
  members: UserCreateManyWithoutCirclesInput
}

type CircleEdge {
  node: Circle!
  cursor: String!
}

type CircleInvite {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  circle: Circle!
  user: User!
}

type CircleInviteConnection {
  pageInfo: PageInfo!
  edges: [CircleInviteEdge]!
  aggregate: AggregateCircleInvite!
}

input CircleInviteCreateInput {
  id: ID
  circle: CircleCreateOneWithoutInvitesInput!
  user: UserCreateOneWithoutCircleInvitesInput!
}

input CircleInviteCreateManyWithoutCircleInput {
  create: [CircleInviteCreateWithoutCircleInput!]
  connect: [CircleInviteWhereUniqueInput!]
}

input CircleInviteCreateManyWithoutUserInput {
  create: [CircleInviteCreateWithoutUserInput!]
  connect: [CircleInviteWhereUniqueInput!]
}

input CircleInviteCreateWithoutCircleInput {
  id: ID
  user: UserCreateOneWithoutCircleInvitesInput!
}

input CircleInviteCreateWithoutUserInput {
  id: ID
  circle: CircleCreateOneWithoutInvitesInput!
}

type CircleInviteEdge {
  node: CircleInvite!
  cursor: String!
}

enum CircleInviteOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CircleInvitePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CircleInviteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CircleInviteScalarWhereInput!]
  OR: [CircleInviteScalarWhereInput!]
  NOT: [CircleInviteScalarWhereInput!]
}

type CircleInviteSubscriptionPayload {
  mutation: MutationType!
  node: CircleInvite
  updatedFields: [String!]
  previousValues: CircleInvitePreviousValues
}

input CircleInviteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CircleInviteWhereInput
  AND: [CircleInviteSubscriptionWhereInput!]
  OR: [CircleInviteSubscriptionWhereInput!]
  NOT: [CircleInviteSubscriptionWhereInput!]
}

input CircleInviteUpdateInput {
  circle: CircleUpdateOneRequiredWithoutInvitesInput
  user: UserUpdateOneRequiredWithoutCircleInvitesInput
}

input CircleInviteUpdateManyWithoutCircleInput {
  create: [CircleInviteCreateWithoutCircleInput!]
  delete: [CircleInviteWhereUniqueInput!]
  connect: [CircleInviteWhereUniqueInput!]
  set: [CircleInviteWhereUniqueInput!]
  disconnect: [CircleInviteWhereUniqueInput!]
  update: [CircleInviteUpdateWithWhereUniqueWithoutCircleInput!]
  upsert: [CircleInviteUpsertWithWhereUniqueWithoutCircleInput!]
  deleteMany: [CircleInviteScalarWhereInput!]
}

input CircleInviteUpdateManyWithoutUserInput {
  create: [CircleInviteCreateWithoutUserInput!]
  delete: [CircleInviteWhereUniqueInput!]
  connect: [CircleInviteWhereUniqueInput!]
  set: [CircleInviteWhereUniqueInput!]
  disconnect: [CircleInviteWhereUniqueInput!]
  update: [CircleInviteUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CircleInviteUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [CircleInviteScalarWhereInput!]
}

input CircleInviteUpdateWithoutCircleDataInput {
  user: UserUpdateOneRequiredWithoutCircleInvitesInput
}

input CircleInviteUpdateWithoutUserDataInput {
  circle: CircleUpdateOneRequiredWithoutInvitesInput
}

input CircleInviteUpdateWithWhereUniqueWithoutCircleInput {
  where: CircleInviteWhereUniqueInput!
  data: CircleInviteUpdateWithoutCircleDataInput!
}

input CircleInviteUpdateWithWhereUniqueWithoutUserInput {
  where: CircleInviteWhereUniqueInput!
  data: CircleInviteUpdateWithoutUserDataInput!
}

input CircleInviteUpsertWithWhereUniqueWithoutCircleInput {
  where: CircleInviteWhereUniqueInput!
  update: CircleInviteUpdateWithoutCircleDataInput!
  create: CircleInviteCreateWithoutCircleInput!
}

input CircleInviteUpsertWithWhereUniqueWithoutUserInput {
  where: CircleInviteWhereUniqueInput!
  update: CircleInviteUpdateWithoutUserDataInput!
  create: CircleInviteCreateWithoutUserInput!
}

input CircleInviteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  circle: CircleWhereInput
  user: UserWhereInput
  AND: [CircleInviteWhereInput!]
  OR: [CircleInviteWhereInput!]
  NOT: [CircleInviteWhereInput!]
}

input CircleInviteWhereUniqueInput {
  id: ID
}

type CircleJoinRequest {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  circle: Circle!
  user: User!
}

type CircleJoinRequestConnection {
  pageInfo: PageInfo!
  edges: [CircleJoinRequestEdge]!
  aggregate: AggregateCircleJoinRequest!
}

input CircleJoinRequestCreateInput {
  id: ID
  circle: CircleCreateOneWithoutJoinRequestsInput!
  user: UserCreateOneWithoutCircleJoinRequestsInput!
}

input CircleJoinRequestCreateManyWithoutCircleInput {
  create: [CircleJoinRequestCreateWithoutCircleInput!]
  connect: [CircleJoinRequestWhereUniqueInput!]
}

input CircleJoinRequestCreateManyWithoutUserInput {
  create: [CircleJoinRequestCreateWithoutUserInput!]
  connect: [CircleJoinRequestWhereUniqueInput!]
}

input CircleJoinRequestCreateWithoutCircleInput {
  id: ID
  user: UserCreateOneWithoutCircleJoinRequestsInput!
}

input CircleJoinRequestCreateWithoutUserInput {
  id: ID
  circle: CircleCreateOneWithoutJoinRequestsInput!
}

type CircleJoinRequestEdge {
  node: CircleJoinRequest!
  cursor: String!
}

enum CircleJoinRequestOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CircleJoinRequestPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CircleJoinRequestScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CircleJoinRequestScalarWhereInput!]
  OR: [CircleJoinRequestScalarWhereInput!]
  NOT: [CircleJoinRequestScalarWhereInput!]
}

type CircleJoinRequestSubscriptionPayload {
  mutation: MutationType!
  node: CircleJoinRequest
  updatedFields: [String!]
  previousValues: CircleJoinRequestPreviousValues
}

input CircleJoinRequestSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CircleJoinRequestWhereInput
  AND: [CircleJoinRequestSubscriptionWhereInput!]
  OR: [CircleJoinRequestSubscriptionWhereInput!]
  NOT: [CircleJoinRequestSubscriptionWhereInput!]
}

input CircleJoinRequestUpdateInput {
  circle: CircleUpdateOneRequiredWithoutJoinRequestsInput
  user: UserUpdateOneRequiredWithoutCircleJoinRequestsInput
}

input CircleJoinRequestUpdateManyWithoutCircleInput {
  create: [CircleJoinRequestCreateWithoutCircleInput!]
  delete: [CircleJoinRequestWhereUniqueInput!]
  connect: [CircleJoinRequestWhereUniqueInput!]
  set: [CircleJoinRequestWhereUniqueInput!]
  disconnect: [CircleJoinRequestWhereUniqueInput!]
  update: [CircleJoinRequestUpdateWithWhereUniqueWithoutCircleInput!]
  upsert: [CircleJoinRequestUpsertWithWhereUniqueWithoutCircleInput!]
  deleteMany: [CircleJoinRequestScalarWhereInput!]
}

input CircleJoinRequestUpdateManyWithoutUserInput {
  create: [CircleJoinRequestCreateWithoutUserInput!]
  delete: [CircleJoinRequestWhereUniqueInput!]
  connect: [CircleJoinRequestWhereUniqueInput!]
  set: [CircleJoinRequestWhereUniqueInput!]
  disconnect: [CircleJoinRequestWhereUniqueInput!]
  update: [CircleJoinRequestUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CircleJoinRequestUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [CircleJoinRequestScalarWhereInput!]
}

input CircleJoinRequestUpdateWithoutCircleDataInput {
  user: UserUpdateOneRequiredWithoutCircleJoinRequestsInput
}

input CircleJoinRequestUpdateWithoutUserDataInput {
  circle: CircleUpdateOneRequiredWithoutJoinRequestsInput
}

input CircleJoinRequestUpdateWithWhereUniqueWithoutCircleInput {
  where: CircleJoinRequestWhereUniqueInput!
  data: CircleJoinRequestUpdateWithoutCircleDataInput!
}

input CircleJoinRequestUpdateWithWhereUniqueWithoutUserInput {
  where: CircleJoinRequestWhereUniqueInput!
  data: CircleJoinRequestUpdateWithoutUserDataInput!
}

input CircleJoinRequestUpsertWithWhereUniqueWithoutCircleInput {
  where: CircleJoinRequestWhereUniqueInput!
  update: CircleJoinRequestUpdateWithoutCircleDataInput!
  create: CircleJoinRequestCreateWithoutCircleInput!
}

input CircleJoinRequestUpsertWithWhereUniqueWithoutUserInput {
  where: CircleJoinRequestWhereUniqueInput!
  update: CircleJoinRequestUpdateWithoutUserDataInput!
  create: CircleJoinRequestCreateWithoutUserInput!
}

input CircleJoinRequestWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  circle: CircleWhereInput
  user: UserWhereInput
  AND: [CircleJoinRequestWhereInput!]
  OR: [CircleJoinRequestWhereInput!]
  NOT: [CircleJoinRequestWhereInput!]
}

input CircleJoinRequestWhereUniqueInput {
  id: ID
}

enum CircleOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  description_ASC
  description_DESC
  name_ASC
  name_DESC
  open_ASC
  open_DESC
}

type CirclePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  description: String
  name: String!
  open: Boolean!
}

input CircleScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  open: Boolean
  open_not: Boolean
  AND: [CircleScalarWhereInput!]
  OR: [CircleScalarWhereInput!]
  NOT: [CircleScalarWhereInput!]
}

type CircleSubscriptionPayload {
  mutation: MutationType!
  node: Circle
  updatedFields: [String!]
  previousValues: CirclePreviousValues
}

input CircleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CircleWhereInput
  AND: [CircleSubscriptionWhereInput!]
  OR: [CircleSubscriptionWhereInput!]
  NOT: [CircleSubscriptionWhereInput!]
}

input CircleUpdateInput {
  description: String
  name: String
  open: Boolean
  joinRequests: CircleJoinRequestUpdateManyWithoutCircleInput
  invites: CircleInviteUpdateManyWithoutCircleInput
  members: UserUpdateManyWithoutCirclesInput
  owner: UserUpdateOneRequiredWithoutCirclesOwnedInput
}

input CircleUpdateManyDataInput {
  description: String
  name: String
  open: Boolean
}

input CircleUpdateManyMutationInput {
  description: String
  name: String
  open: Boolean
}

input CircleUpdateManyWithoutMembersInput {
  create: [CircleCreateWithoutMembersInput!]
  delete: [CircleWhereUniqueInput!]
  connect: [CircleWhereUniqueInput!]
  set: [CircleWhereUniqueInput!]
  disconnect: [CircleWhereUniqueInput!]
  update: [CircleUpdateWithWhereUniqueWithoutMembersInput!]
  upsert: [CircleUpsertWithWhereUniqueWithoutMembersInput!]
  deleteMany: [CircleScalarWhereInput!]
  updateMany: [CircleUpdateManyWithWhereNestedInput!]
}

input CircleUpdateManyWithoutOwnerInput {
  create: [CircleCreateWithoutOwnerInput!]
  delete: [CircleWhereUniqueInput!]
  connect: [CircleWhereUniqueInput!]
  set: [CircleWhereUniqueInput!]
  disconnect: [CircleWhereUniqueInput!]
  update: [CircleUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [CircleUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [CircleScalarWhereInput!]
  updateMany: [CircleUpdateManyWithWhereNestedInput!]
}

input CircleUpdateManyWithWhereNestedInput {
  where: CircleScalarWhereInput!
  data: CircleUpdateManyDataInput!
}

input CircleUpdateOneRequiredWithoutInvitesInput {
  create: CircleCreateWithoutInvitesInput
  update: CircleUpdateWithoutInvitesDataInput
  upsert: CircleUpsertWithoutInvitesInput
  connect: CircleWhereUniqueInput
}

input CircleUpdateOneRequiredWithoutJoinRequestsInput {
  create: CircleCreateWithoutJoinRequestsInput
  update: CircleUpdateWithoutJoinRequestsDataInput
  upsert: CircleUpsertWithoutJoinRequestsInput
  connect: CircleWhereUniqueInput
}

input CircleUpdateWithoutInvitesDataInput {
  description: String
  name: String
  open: Boolean
  joinRequests: CircleJoinRequestUpdateManyWithoutCircleInput
  members: UserUpdateManyWithoutCirclesInput
  owner: UserUpdateOneRequiredWithoutCirclesOwnedInput
}

input CircleUpdateWithoutJoinRequestsDataInput {
  description: String
  name: String
  open: Boolean
  invites: CircleInviteUpdateManyWithoutCircleInput
  members: UserUpdateManyWithoutCirclesInput
  owner: UserUpdateOneRequiredWithoutCirclesOwnedInput
}

input CircleUpdateWithoutMembersDataInput {
  description: String
  name: String
  open: Boolean
  joinRequests: CircleJoinRequestUpdateManyWithoutCircleInput
  invites: CircleInviteUpdateManyWithoutCircleInput
  owner: UserUpdateOneRequiredWithoutCirclesOwnedInput
}

input CircleUpdateWithoutOwnerDataInput {
  description: String
  name: String
  open: Boolean
  joinRequests: CircleJoinRequestUpdateManyWithoutCircleInput
  invites: CircleInviteUpdateManyWithoutCircleInput
  members: UserUpdateManyWithoutCirclesInput
}

input CircleUpdateWithWhereUniqueWithoutMembersInput {
  where: CircleWhereUniqueInput!
  data: CircleUpdateWithoutMembersDataInput!
}

input CircleUpdateWithWhereUniqueWithoutOwnerInput {
  where: CircleWhereUniqueInput!
  data: CircleUpdateWithoutOwnerDataInput!
}

input CircleUpsertWithoutInvitesInput {
  update: CircleUpdateWithoutInvitesDataInput!
  create: CircleCreateWithoutInvitesInput!
}

input CircleUpsertWithoutJoinRequestsInput {
  update: CircleUpdateWithoutJoinRequestsDataInput!
  create: CircleCreateWithoutJoinRequestsInput!
}

input CircleUpsertWithWhereUniqueWithoutMembersInput {
  where: CircleWhereUniqueInput!
  update: CircleUpdateWithoutMembersDataInput!
  create: CircleCreateWithoutMembersInput!
}

input CircleUpsertWithWhereUniqueWithoutOwnerInput {
  where: CircleWhereUniqueInput!
  update: CircleUpdateWithoutOwnerDataInput!
  create: CircleCreateWithoutOwnerInput!
}

input CircleWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  open: Boolean
  open_not: Boolean
  joinRequests_every: CircleJoinRequestWhereInput
  joinRequests_some: CircleJoinRequestWhereInput
  joinRequests_none: CircleJoinRequestWhereInput
  invites_every: CircleInviteWhereInput
  invites_some: CircleInviteWhereInput
  invites_none: CircleInviteWhereInput
  members_every: UserWhereInput
  members_some: UserWhereInput
  members_none: UserWhereInput
  owner: UserWhereInput
  AND: [CircleWhereInput!]
  OR: [CircleWhereInput!]
  NOT: [CircleWhereInput!]
}

input CircleWhereUniqueInput {
  id: ID
  name: String
}

scalar DateTime

type Dot {
  id: ID!
  createdAt: DateTime!
  action: String!
  amount: Int!
  total: Int!
  user: User!
}

type DotConnection {
  pageInfo: PageInfo!
  edges: [DotEdge]!
  aggregate: AggregateDot!
}

input DotCreateInput {
  id: ID
  action: String!
  amount: Int!
  total: Int!
  user: UserCreateOneWithoutDotsInput!
}

input DotCreateManyWithoutUserInput {
  create: [DotCreateWithoutUserInput!]
  connect: [DotWhereUniqueInput!]
}

input DotCreateWithoutUserInput {
  id: ID
  action: String!
  amount: Int!
  total: Int!
}

type DotEdge {
  node: Dot!
  cursor: String!
}

enum DotOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  action_ASC
  action_DESC
  amount_ASC
  amount_DESC
  total_ASC
  total_DESC
}

type DotPreviousValues {
  id: ID!
  createdAt: DateTime!
  action: String!
  amount: Int!
  total: Int!
}

input DotScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  action: String
  action_not: String
  action_in: [String!]
  action_not_in: [String!]
  action_lt: String
  action_lte: String
  action_gt: String
  action_gte: String
  action_contains: String
  action_not_contains: String
  action_starts_with: String
  action_not_starts_with: String
  action_ends_with: String
  action_not_ends_with: String
  amount: Int
  amount_not: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  total: Int
  total_not: Int
  total_in: [Int!]
  total_not_in: [Int!]
  total_lt: Int
  total_lte: Int
  total_gt: Int
  total_gte: Int
  AND: [DotScalarWhereInput!]
  OR: [DotScalarWhereInput!]
  NOT: [DotScalarWhereInput!]
}

type DotSubscriptionPayload {
  mutation: MutationType!
  node: Dot
  updatedFields: [String!]
  previousValues: DotPreviousValues
}

input DotSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DotWhereInput
  AND: [DotSubscriptionWhereInput!]
  OR: [DotSubscriptionWhereInput!]
  NOT: [DotSubscriptionWhereInput!]
}

input DotUpdateInput {
  action: String
  amount: Int
  total: Int
  user: UserUpdateOneRequiredWithoutDotsInput
}

input DotUpdateManyDataInput {
  action: String
  amount: Int
  total: Int
}

input DotUpdateManyMutationInput {
  action: String
  amount: Int
  total: Int
}

input DotUpdateManyWithoutUserInput {
  create: [DotCreateWithoutUserInput!]
  delete: [DotWhereUniqueInput!]
  connect: [DotWhereUniqueInput!]
  set: [DotWhereUniqueInput!]
  disconnect: [DotWhereUniqueInput!]
  update: [DotUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [DotUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [DotScalarWhereInput!]
  updateMany: [DotUpdateManyWithWhereNestedInput!]
}

input DotUpdateManyWithWhereNestedInput {
  where: DotScalarWhereInput!
  data: DotUpdateManyDataInput!
}

input DotUpdateWithoutUserDataInput {
  action: String
  amount: Int
  total: Int
}

input DotUpdateWithWhereUniqueWithoutUserInput {
  where: DotWhereUniqueInput!
  data: DotUpdateWithoutUserDataInput!
}

input DotUpsertWithWhereUniqueWithoutUserInput {
  where: DotWhereUniqueInput!
  update: DotUpdateWithoutUserDataInput!
  create: DotCreateWithoutUserInput!
}

input DotWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  action: String
  action_not: String
  action_in: [String!]
  action_not_in: [String!]
  action_lt: String
  action_lte: String
  action_gt: String
  action_gte: String
  action_contains: String
  action_not_contains: String
  action_starts_with: String
  action_not_starts_with: String
  action_ends_with: String
  action_not_ends_with: String
  amount: Int
  amount_not: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  total: Int
  total_not: Int
  total_in: [Int!]
  total_not_in: [Int!]
  total_lt: Int
  total_lte: Int
  total_gt: Int
  total_gte: Int
  user: UserWhereInput
  AND: [DotWhereInput!]
  OR: [DotWhereInput!]
  NOT: [DotWhereInput!]
}

input DotWhereUniqueInput {
  id: ID
}

type Event {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  endDate: DateTime!
  goal: Int!
  multiplier: Int
  sponsorName: String
  sponsorWebsite: String
  startDate: DateTime!
  charity: Charity!
  donations(where: TransferWhereInput, orderBy: TransferOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transfer!]
}

type EventConnection {
  pageInfo: PageInfo!
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  id: ID
  endDate: DateTime!
  goal: Int!
  multiplier: Int
  sponsorName: String
  sponsorWebsite: String
  startDate: DateTime!
  charity: CharityCreateOneWithoutEventsInput!
  donations: TransferCreateManyWithoutEventInput
}

input EventCreateManyWithoutCharityInput {
  create: [EventCreateWithoutCharityInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateOneInput {
  create: EventCreateInput
  connect: EventWhereUniqueInput
}

input EventCreateOneWithoutDonationsInput {
  create: EventCreateWithoutDonationsInput
  connect: EventWhereUniqueInput
}

input EventCreateWithoutCharityInput {
  id: ID
  endDate: DateTime!
  goal: Int!
  multiplier: Int
  sponsorName: String
  sponsorWebsite: String
  startDate: DateTime!
  donations: TransferCreateManyWithoutEventInput
}

input EventCreateWithoutDonationsInput {
  id: ID
  endDate: DateTime!
  goal: Int!
  multiplier: Int
  sponsorName: String
  sponsorWebsite: String
  startDate: DateTime!
  charity: CharityCreateOneWithoutEventsInput!
}

type EventEdge {
  node: Event!
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  endDate_ASC
  endDate_DESC
  goal_ASC
  goal_DESC
  multiplier_ASC
  multiplier_DESC
  sponsorName_ASC
  sponsorName_DESC
  sponsorWebsite_ASC
  sponsorWebsite_DESC
  startDate_ASC
  startDate_DESC
}

type EventPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  endDate: DateTime!
  goal: Int!
  multiplier: Int
  sponsorName: String
  sponsorWebsite: String
  startDate: DateTime!
}

input EventScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  endDate: DateTime
  endDate_not: DateTime
  endDate_in: [DateTime!]
  endDate_not_in: [DateTime!]
  endDate_lt: DateTime
  endDate_lte: DateTime
  endDate_gt: DateTime
  endDate_gte: DateTime
  goal: Int
  goal_not: Int
  goal_in: [Int!]
  goal_not_in: [Int!]
  goal_lt: Int
  goal_lte: Int
  goal_gt: Int
  goal_gte: Int
  multiplier: Int
  multiplier_not: Int
  multiplier_in: [Int!]
  multiplier_not_in: [Int!]
  multiplier_lt: Int
  multiplier_lte: Int
  multiplier_gt: Int
  multiplier_gte: Int
  sponsorName: String
  sponsorName_not: String
  sponsorName_in: [String!]
  sponsorName_not_in: [String!]
  sponsorName_lt: String
  sponsorName_lte: String
  sponsorName_gt: String
  sponsorName_gte: String
  sponsorName_contains: String
  sponsorName_not_contains: String
  sponsorName_starts_with: String
  sponsorName_not_starts_with: String
  sponsorName_ends_with: String
  sponsorName_not_ends_with: String
  sponsorWebsite: String
  sponsorWebsite_not: String
  sponsorWebsite_in: [String!]
  sponsorWebsite_not_in: [String!]
  sponsorWebsite_lt: String
  sponsorWebsite_lte: String
  sponsorWebsite_gt: String
  sponsorWebsite_gte: String
  sponsorWebsite_contains: String
  sponsorWebsite_not_contains: String
  sponsorWebsite_starts_with: String
  sponsorWebsite_not_starts_with: String
  sponsorWebsite_ends_with: String
  sponsorWebsite_not_ends_with: String
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  AND: [EventScalarWhereInput!]
  OR: [EventScalarWhereInput!]
  NOT: [EventScalarWhereInput!]
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EventWhereInput
  AND: [EventSubscriptionWhereInput!]
  OR: [EventSubscriptionWhereInput!]
  NOT: [EventSubscriptionWhereInput!]
}

input EventUpdateDataInput {
  endDate: DateTime
  goal: Int
  multiplier: Int
  sponsorName: String
  sponsorWebsite: String
  startDate: DateTime
  charity: CharityUpdateOneRequiredWithoutEventsInput
  donations: TransferUpdateManyWithoutEventInput
}

input EventUpdateInput {
  endDate: DateTime
  goal: Int
  multiplier: Int
  sponsorName: String
  sponsorWebsite: String
  startDate: DateTime
  charity: CharityUpdateOneRequiredWithoutEventsInput
  donations: TransferUpdateManyWithoutEventInput
}

input EventUpdateManyDataInput {
  endDate: DateTime
  goal: Int
  multiplier: Int
  sponsorName: String
  sponsorWebsite: String
  startDate: DateTime
}

input EventUpdateManyMutationInput {
  endDate: DateTime
  goal: Int
  multiplier: Int
  sponsorName: String
  sponsorWebsite: String
  startDate: DateTime
}

input EventUpdateManyWithoutCharityInput {
  create: [EventCreateWithoutCharityInput!]
  delete: [EventWhereUniqueInput!]
  connect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutCharityInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutCharityInput!]
  deleteMany: [EventScalarWhereInput!]
  updateMany: [EventUpdateManyWithWhereNestedInput!]
}

input EventUpdateManyWithWhereNestedInput {
  where: EventScalarWhereInput!
  data: EventUpdateManyDataInput!
}

input EventUpdateOneRequiredInput {
  create: EventCreateInput
  update: EventUpdateDataInput
  upsert: EventUpsertNestedInput
  connect: EventWhereUniqueInput
}

input EventUpdateOneWithoutDonationsInput {
  create: EventCreateWithoutDonationsInput
  update: EventUpdateWithoutDonationsDataInput
  upsert: EventUpsertWithoutDonationsInput
  delete: Boolean
  disconnect: Boolean
  connect: EventWhereUniqueInput
}

input EventUpdateWithoutCharityDataInput {
  endDate: DateTime
  goal: Int
  multiplier: Int
  sponsorName: String
  sponsorWebsite: String
  startDate: DateTime
  donations: TransferUpdateManyWithoutEventInput
}

input EventUpdateWithoutDonationsDataInput {
  endDate: DateTime
  goal: Int
  multiplier: Int
  sponsorName: String
  sponsorWebsite: String
  startDate: DateTime
  charity: CharityUpdateOneRequiredWithoutEventsInput
}

input EventUpdateWithWhereUniqueWithoutCharityInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutCharityDataInput!
}

input EventUpsertNestedInput {
  update: EventUpdateDataInput!
  create: EventCreateInput!
}

input EventUpsertWithoutDonationsInput {
  update: EventUpdateWithoutDonationsDataInput!
  create: EventCreateWithoutDonationsInput!
}

input EventUpsertWithWhereUniqueWithoutCharityInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutCharityDataInput!
  create: EventCreateWithoutCharityInput!
}

input EventWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  endDate: DateTime
  endDate_not: DateTime
  endDate_in: [DateTime!]
  endDate_not_in: [DateTime!]
  endDate_lt: DateTime
  endDate_lte: DateTime
  endDate_gt: DateTime
  endDate_gte: DateTime
  goal: Int
  goal_not: Int
  goal_in: [Int!]
  goal_not_in: [Int!]
  goal_lt: Int
  goal_lte: Int
  goal_gt: Int
  goal_gte: Int
  multiplier: Int
  multiplier_not: Int
  multiplier_in: [Int!]
  multiplier_not_in: [Int!]
  multiplier_lt: Int
  multiplier_lte: Int
  multiplier_gt: Int
  multiplier_gte: Int
  sponsorName: String
  sponsorName_not: String
  sponsorName_in: [String!]
  sponsorName_not_in: [String!]
  sponsorName_lt: String
  sponsorName_lte: String
  sponsorName_gt: String
  sponsorName_gte: String
  sponsorName_contains: String
  sponsorName_not_contains: String
  sponsorName_starts_with: String
  sponsorName_not_starts_with: String
  sponsorName_ends_with: String
  sponsorName_not_ends_with: String
  sponsorWebsite: String
  sponsorWebsite_not: String
  sponsorWebsite_in: [String!]
  sponsorWebsite_not_in: [String!]
  sponsorWebsite_lt: String
  sponsorWebsite_lte: String
  sponsorWebsite_gt: String
  sponsorWebsite_gte: String
  sponsorWebsite_contains: String
  sponsorWebsite_not_contains: String
  sponsorWebsite_starts_with: String
  sponsorWebsite_not_starts_with: String
  sponsorWebsite_ends_with: String
  sponsorWebsite_not_ends_with: String
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  charity: CharityWhereInput
  donations_every: TransferWhereInput
  donations_some: TransferWhereInput
  donations_none: TransferWhereInput
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
}

input EventWhereUniqueInput {
  id: ID
}

type Halo {
  id: ID!
  createdAt: DateTime!
  key: String!
  tier: String
  user: User!
}

type HaloConnection {
  pageInfo: PageInfo!
  edges: [HaloEdge]!
  aggregate: AggregateHalo!
}

input HaloCreateInput {
  id: ID
  key: String!
  tier: String
  user: UserCreateOneWithoutHalosInput!
}

input HaloCreateManyWithoutUserInput {
  create: [HaloCreateWithoutUserInput!]
  connect: [HaloWhereUniqueInput!]
}

input HaloCreateWithoutUserInput {
  id: ID
  key: String!
  tier: String
}

type HaloEdge {
  node: Halo!
  cursor: String!
}

enum HaloOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  key_ASC
  key_DESC
  tier_ASC
  tier_DESC
}

type HaloPreviousValues {
  id: ID!
  createdAt: DateTime!
  key: String!
  tier: String
}

input HaloScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  key: String
  key_not: String
  key_in: [String!]
  key_not_in: [String!]
  key_lt: String
  key_lte: String
  key_gt: String
  key_gte: String
  key_contains: String
  key_not_contains: String
  key_starts_with: String
  key_not_starts_with: String
  key_ends_with: String
  key_not_ends_with: String
  tier: String
  tier_not: String
  tier_in: [String!]
  tier_not_in: [String!]
  tier_lt: String
  tier_lte: String
  tier_gt: String
  tier_gte: String
  tier_contains: String
  tier_not_contains: String
  tier_starts_with: String
  tier_not_starts_with: String
  tier_ends_with: String
  tier_not_ends_with: String
  AND: [HaloScalarWhereInput!]
  OR: [HaloScalarWhereInput!]
  NOT: [HaloScalarWhereInput!]
}

type HaloSubscriptionPayload {
  mutation: MutationType!
  node: Halo
  updatedFields: [String!]
  previousValues: HaloPreviousValues
}

input HaloSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HaloWhereInput
  AND: [HaloSubscriptionWhereInput!]
  OR: [HaloSubscriptionWhereInput!]
  NOT: [HaloSubscriptionWhereInput!]
}

input HaloUpdateInput {
  key: String
  tier: String
  user: UserUpdateOneRequiredWithoutHalosInput
}

input HaloUpdateManyDataInput {
  key: String
  tier: String
}

input HaloUpdateManyMutationInput {
  key: String
  tier: String
}

input HaloUpdateManyWithoutUserInput {
  create: [HaloCreateWithoutUserInput!]
  delete: [HaloWhereUniqueInput!]
  connect: [HaloWhereUniqueInput!]
  set: [HaloWhereUniqueInput!]
  disconnect: [HaloWhereUniqueInput!]
  update: [HaloUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [HaloUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [HaloScalarWhereInput!]
  updateMany: [HaloUpdateManyWithWhereNestedInput!]
}

input HaloUpdateManyWithWhereNestedInput {
  where: HaloScalarWhereInput!
  data: HaloUpdateManyDataInput!
}

input HaloUpdateWithoutUserDataInput {
  key: String
  tier: String
}

input HaloUpdateWithWhereUniqueWithoutUserInput {
  where: HaloWhereUniqueInput!
  data: HaloUpdateWithoutUserDataInput!
}

input HaloUpsertWithWhereUniqueWithoutUserInput {
  where: HaloWhereUniqueInput!
  update: HaloUpdateWithoutUserDataInput!
  create: HaloCreateWithoutUserInput!
}

input HaloWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  key: String
  key_not: String
  key_in: [String!]
  key_not_in: [String!]
  key_lt: String
  key_lte: String
  key_gt: String
  key_gte: String
  key_contains: String
  key_not_contains: String
  key_starts_with: String
  key_not_starts_with: String
  key_ends_with: String
  key_not_ends_with: String
  tier: String
  tier_not: String
  tier_in: [String!]
  tier_not_in: [String!]
  tier_lt: String
  tier_lte: String
  tier_gt: String
  tier_gte: String
  tier_contains: String
  tier_not_contains: String
  tier_starts_with: String
  tier_not_starts_with: String
  tier_ends_with: String
  tier_not_ends_with: String
  user: UserWhereInput
  AND: [HaloWhereInput!]
  OR: [HaloWhereInput!]
  NOT: [HaloWhereInput!]
}

input HaloWhereUniqueInput {
  id: ID
}

type Identity {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  provider: IdentityProvider!
  providerID: String!
  user: User!
}

type IdentityConnection {
  pageInfo: PageInfo!
  edges: [IdentityEdge]!
  aggregate: AggregateIdentity!
}

input IdentityCreateInput {
  id: ID
  provider: IdentityProvider!
  providerID: String!
  user: UserCreateOneWithoutIdentityInput!
}

input IdentityCreateOneWithoutUserInput {
  create: IdentityCreateWithoutUserInput
  connect: IdentityWhereUniqueInput
}

input IdentityCreateWithoutUserInput {
  id: ID
  provider: IdentityProvider!
  providerID: String!
}

type IdentityEdge {
  node: Identity!
  cursor: String!
}

enum IdentityOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  provider_ASC
  provider_DESC
  providerID_ASC
  providerID_DESC
}

type IdentityPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  provider: IdentityProvider!
  providerID: String!
}

enum IdentityProvider {
  FACEBOOK
  GOOGLE
}

type IdentitySubscriptionPayload {
  mutation: MutationType!
  node: Identity
  updatedFields: [String!]
  previousValues: IdentityPreviousValues
}

input IdentitySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: IdentityWhereInput
  AND: [IdentitySubscriptionWhereInput!]
  OR: [IdentitySubscriptionWhereInput!]
  NOT: [IdentitySubscriptionWhereInput!]
}

input IdentityUpdateInput {
  provider: IdentityProvider
  providerID: String
  user: UserUpdateOneRequiredWithoutIdentityInput
}

input IdentityUpdateManyMutationInput {
  provider: IdentityProvider
  providerID: String
}

input IdentityUpdateOneRequiredWithoutUserInput {
  create: IdentityCreateWithoutUserInput
  update: IdentityUpdateWithoutUserDataInput
  upsert: IdentityUpsertWithoutUserInput
  connect: IdentityWhereUniqueInput
}

input IdentityUpdateWithoutUserDataInput {
  provider: IdentityProvider
  providerID: String
}

input IdentityUpsertWithoutUserInput {
  update: IdentityUpdateWithoutUserDataInput!
  create: IdentityCreateWithoutUserInput!
}

input IdentityWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  provider: IdentityProvider
  provider_not: IdentityProvider
  provider_in: [IdentityProvider!]
  provider_not_in: [IdentityProvider!]
  providerID: String
  providerID_not: String
  providerID_in: [String!]
  providerID_not_in: [String!]
  providerID_lt: String
  providerID_lte: String
  providerID_gt: String
  providerID_gte: String
  providerID_contains: String
  providerID_not_contains: String
  providerID_starts_with: String
  providerID_not_starts_with: String
  providerID_ends_with: String
  providerID_not_ends_with: String
  user: UserWhereInput
  AND: [IdentityWhereInput!]
  OR: [IdentityWhereInput!]
  NOT: [IdentityWhereInput!]
}

input IdentityWhereUniqueInput {
  id: ID
  providerID: String
}

scalar Long

type Loop {
  id: ID!
  createdAt: DateTime!
  count: Int!
  event: Event!
  user: User!
}

type LoopConnection {
  pageInfo: PageInfo!
  edges: [LoopEdge]!
  aggregate: AggregateLoop!
}

input LoopCreateInput {
  id: ID
  count: Int!
  event: EventCreateOneInput!
  user: UserCreateOneWithoutLoopsInput!
}

input LoopCreateManyWithoutUserInput {
  create: [LoopCreateWithoutUserInput!]
  connect: [LoopWhereUniqueInput!]
}

input LoopCreateWithoutUserInput {
  id: ID
  count: Int!
  event: EventCreateOneInput!
}

type LoopEdge {
  node: Loop!
  cursor: String!
}

enum LoopOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  count_ASC
  count_DESC
}

type LoopPreviousValues {
  id: ID!
  createdAt: DateTime!
  count: Int!
}

input LoopScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  count: Int
  count_not: Int
  count_in: [Int!]
  count_not_in: [Int!]
  count_lt: Int
  count_lte: Int
  count_gt: Int
  count_gte: Int
  AND: [LoopScalarWhereInput!]
  OR: [LoopScalarWhereInput!]
  NOT: [LoopScalarWhereInput!]
}

type LoopSubscriptionPayload {
  mutation: MutationType!
  node: Loop
  updatedFields: [String!]
  previousValues: LoopPreviousValues
}

input LoopSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LoopWhereInput
  AND: [LoopSubscriptionWhereInput!]
  OR: [LoopSubscriptionWhereInput!]
  NOT: [LoopSubscriptionWhereInput!]
}

input LoopUpdateInput {
  count: Int
  event: EventUpdateOneRequiredInput
  user: UserUpdateOneRequiredWithoutLoopsInput
}

input LoopUpdateManyDataInput {
  count: Int
}

input LoopUpdateManyMutationInput {
  count: Int
}

input LoopUpdateManyWithoutUserInput {
  create: [LoopCreateWithoutUserInput!]
  delete: [LoopWhereUniqueInput!]
  connect: [LoopWhereUniqueInput!]
  set: [LoopWhereUniqueInput!]
  disconnect: [LoopWhereUniqueInput!]
  update: [LoopUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [LoopUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [LoopScalarWhereInput!]
  updateMany: [LoopUpdateManyWithWhereNestedInput!]
}

input LoopUpdateManyWithWhereNestedInput {
  where: LoopScalarWhereInput!
  data: LoopUpdateManyDataInput!
}

input LoopUpdateWithoutUserDataInput {
  count: Int
  event: EventUpdateOneRequiredInput
}

input LoopUpdateWithWhereUniqueWithoutUserInput {
  where: LoopWhereUniqueInput!
  data: LoopUpdateWithoutUserDataInput!
}

input LoopUpsertWithWhereUniqueWithoutUserInput {
  where: LoopWhereUniqueInput!
  update: LoopUpdateWithoutUserDataInput!
  create: LoopCreateWithoutUserInput!
}

input LoopWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  count: Int
  count_not: Int
  count_in: [Int!]
  count_not_in: [Int!]
  count_lt: Int
  count_lte: Int
  count_gt: Int
  count_gte: Int
  event: EventWhereInput
  user: UserWhereInput
  AND: [LoopWhereInput!]
  OR: [LoopWhereInput!]
  NOT: [LoopWhereInput!]
}

input LoopWhereUniqueInput {
  id: ID
}

type Mutation {
  createCharge(data: ChargeCreateInput!): Charge!
  updateCharge(data: ChargeUpdateInput!, where: ChargeWhereUniqueInput!): Charge
  updateManyCharges(data: ChargeUpdateManyMutationInput!, where: ChargeWhereInput): BatchPayload!
  upsertCharge(where: ChargeWhereUniqueInput!, create: ChargeCreateInput!, update: ChargeUpdateInput!): Charge!
  deleteCharge(where: ChargeWhereUniqueInput!): Charge
  deleteManyCharges(where: ChargeWhereInput): BatchPayload!
  createCharity(data: CharityCreateInput!): Charity!
  updateCharity(data: CharityUpdateInput!, where: CharityWhereUniqueInput!): Charity
  updateManyCharities(data: CharityUpdateManyMutationInput!, where: CharityWhereInput): BatchPayload!
  upsertCharity(where: CharityWhereUniqueInput!, create: CharityCreateInput!, update: CharityUpdateInput!): Charity!
  deleteCharity(where: CharityWhereUniqueInput!): Charity
  deleteManyCharities(where: CharityWhereInput): BatchPayload!
  createCharityAuthHistory(data: CharityAuthHistoryCreateInput!): CharityAuthHistory!
  updateCharityAuthHistory(data: CharityAuthHistoryUpdateInput!, where: CharityAuthHistoryWhereUniqueInput!): CharityAuthHistory
  upsertCharityAuthHistory(where: CharityAuthHistoryWhereUniqueInput!, create: CharityAuthHistoryCreateInput!, update: CharityAuthHistoryUpdateInput!): CharityAuthHistory!
  deleteCharityAuthHistory(where: CharityAuthHistoryWhereUniqueInput!): CharityAuthHistory
  deleteManyCharityAuthHistories(where: CharityAuthHistoryWhereInput): BatchPayload!
  createCircle(data: CircleCreateInput!): Circle!
  updateCircle(data: CircleUpdateInput!, where: CircleWhereUniqueInput!): Circle
  updateManyCircles(data: CircleUpdateManyMutationInput!, where: CircleWhereInput): BatchPayload!
  upsertCircle(where: CircleWhereUniqueInput!, create: CircleCreateInput!, update: CircleUpdateInput!): Circle!
  deleteCircle(where: CircleWhereUniqueInput!): Circle
  deleteManyCircles(where: CircleWhereInput): BatchPayload!
  createCircleInvite(data: CircleInviteCreateInput!): CircleInvite!
  updateCircleInvite(data: CircleInviteUpdateInput!, where: CircleInviteWhereUniqueInput!): CircleInvite
  upsertCircleInvite(where: CircleInviteWhereUniqueInput!, create: CircleInviteCreateInput!, update: CircleInviteUpdateInput!): CircleInvite!
  deleteCircleInvite(where: CircleInviteWhereUniqueInput!): CircleInvite
  deleteManyCircleInvites(where: CircleInviteWhereInput): BatchPayload!
  createCircleJoinRequest(data: CircleJoinRequestCreateInput!): CircleJoinRequest!
  updateCircleJoinRequest(data: CircleJoinRequestUpdateInput!, where: CircleJoinRequestWhereUniqueInput!): CircleJoinRequest
  upsertCircleJoinRequest(where: CircleJoinRequestWhereUniqueInput!, create: CircleJoinRequestCreateInput!, update: CircleJoinRequestUpdateInput!): CircleJoinRequest!
  deleteCircleJoinRequest(where: CircleJoinRequestWhereUniqueInput!): CircleJoinRequest
  deleteManyCircleJoinRequests(where: CircleJoinRequestWhereInput): BatchPayload!
  createDot(data: DotCreateInput!): Dot!
  updateDot(data: DotUpdateInput!, where: DotWhereUniqueInput!): Dot
  updateManyDots(data: DotUpdateManyMutationInput!, where: DotWhereInput): BatchPayload!
  upsertDot(where: DotWhereUniqueInput!, create: DotCreateInput!, update: DotUpdateInput!): Dot!
  deleteDot(where: DotWhereUniqueInput!): Dot
  deleteManyDots(where: DotWhereInput): BatchPayload!
  createEvent(data: EventCreateInput!): Event!
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateManyEvents(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  createHalo(data: HaloCreateInput!): Halo!
  updateHalo(data: HaloUpdateInput!, where: HaloWhereUniqueInput!): Halo
  updateManyHaloes(data: HaloUpdateManyMutationInput!, where: HaloWhereInput): BatchPayload!
  upsertHalo(where: HaloWhereUniqueInput!, create: HaloCreateInput!, update: HaloUpdateInput!): Halo!
  deleteHalo(where: HaloWhereUniqueInput!): Halo
  deleteManyHaloes(where: HaloWhereInput): BatchPayload!
  createIdentity(data: IdentityCreateInput!): Identity!
  updateIdentity(data: IdentityUpdateInput!, where: IdentityWhereUniqueInput!): Identity
  updateManyIdentities(data: IdentityUpdateManyMutationInput!, where: IdentityWhereInput): BatchPayload!
  upsertIdentity(where: IdentityWhereUniqueInput!, create: IdentityCreateInput!, update: IdentityUpdateInput!): Identity!
  deleteIdentity(where: IdentityWhereUniqueInput!): Identity
  deleteManyIdentities(where: IdentityWhereInput): BatchPayload!
  createLoop(data: LoopCreateInput!): Loop!
  updateLoop(data: LoopUpdateInput!, where: LoopWhereUniqueInput!): Loop
  updateManyLoops(data: LoopUpdateManyMutationInput!, where: LoopWhereInput): BatchPayload!
  upsertLoop(where: LoopWhereUniqueInput!, create: LoopCreateInput!, update: LoopUpdateInput!): Loop!
  deleteLoop(where: LoopWhereUniqueInput!): Loop
  deleteManyLoops(where: LoopWhereInput): BatchPayload!
  createPreferences(data: PreferencesCreateInput!): Preferences!
  updatePreferences(data: PreferencesUpdateInput!, where: PreferencesWhereUniqueInput!): Preferences
  updateManyPreferenceses(data: PreferencesUpdateManyMutationInput!, where: PreferencesWhereInput): BatchPayload!
  upsertPreferences(where: PreferencesWhereUniqueInput!, create: PreferencesCreateInput!, update: PreferencesUpdateInput!): Preferences!
  deletePreferences(where: PreferencesWhereUniqueInput!): Preferences
  deleteManyPreferenceses(where: PreferencesWhereInput): BatchPayload!
  createTransaction(data: TransactionCreateInput!): Transaction!
  updateTransaction(data: TransactionUpdateInput!, where: TransactionWhereUniqueInput!): Transaction
  updateManyTransactions(data: TransactionUpdateManyMutationInput!, where: TransactionWhereInput): BatchPayload!
  upsertTransaction(where: TransactionWhereUniqueInput!, create: TransactionCreateInput!, update: TransactionUpdateInput!): Transaction!
  deleteTransaction(where: TransactionWhereUniqueInput!): Transaction
  deleteManyTransactions(where: TransactionWhereInput): BatchPayload!
  createTransfer(data: TransferCreateInput!): Transfer!
  updateTransfer(data: TransferUpdateInput!, where: TransferWhereUniqueInput!): Transfer
  updateManyTransfers(data: TransferUpdateManyMutationInput!, where: TransferWhereInput): BatchPayload!
  upsertTransfer(where: TransferWhereUniqueInput!, create: TransferCreateInput!, update: TransferUpdateInput!): Transfer!
  deleteTransfer(where: TransferWhereUniqueInput!): Transfer
  deleteManyTransfers(where: TransferWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Preferences {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  allowDonationEmails: Boolean!
  publicProfile: Boolean!
  user: User!
}

type PreferencesConnection {
  pageInfo: PageInfo!
  edges: [PreferencesEdge]!
  aggregate: AggregatePreferences!
}

input PreferencesCreateInput {
  id: ID
  allowDonationEmails: Boolean
  publicProfile: Boolean
  user: UserCreateOneWithoutPreferencesInput!
}

input PreferencesCreateOneWithoutUserInput {
  create: PreferencesCreateWithoutUserInput
  connect: PreferencesWhereUniqueInput
}

input PreferencesCreateWithoutUserInput {
  id: ID
  allowDonationEmails: Boolean
  publicProfile: Boolean
}

type PreferencesEdge {
  node: Preferences!
  cursor: String!
}

enum PreferencesOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  allowDonationEmails_ASC
  allowDonationEmails_DESC
  publicProfile_ASC
  publicProfile_DESC
}

type PreferencesPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  allowDonationEmails: Boolean!
  publicProfile: Boolean!
}

type PreferencesSubscriptionPayload {
  mutation: MutationType!
  node: Preferences
  updatedFields: [String!]
  previousValues: PreferencesPreviousValues
}

input PreferencesSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PreferencesWhereInput
  AND: [PreferencesSubscriptionWhereInput!]
  OR: [PreferencesSubscriptionWhereInput!]
  NOT: [PreferencesSubscriptionWhereInput!]
}

input PreferencesUpdateInput {
  allowDonationEmails: Boolean
  publicProfile: Boolean
  user: UserUpdateOneRequiredWithoutPreferencesInput
}

input PreferencesUpdateManyMutationInput {
  allowDonationEmails: Boolean
  publicProfile: Boolean
}

input PreferencesUpdateOneRequiredWithoutUserInput {
  create: PreferencesCreateWithoutUserInput
  update: PreferencesUpdateWithoutUserDataInput
  upsert: PreferencesUpsertWithoutUserInput
  connect: PreferencesWhereUniqueInput
}

input PreferencesUpdateWithoutUserDataInput {
  allowDonationEmails: Boolean
  publicProfile: Boolean
}

input PreferencesUpsertWithoutUserInput {
  update: PreferencesUpdateWithoutUserDataInput!
  create: PreferencesCreateWithoutUserInput!
}

input PreferencesWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  allowDonationEmails: Boolean
  allowDonationEmails_not: Boolean
  publicProfile: Boolean
  publicProfile_not: Boolean
  user: UserWhereInput
  AND: [PreferencesWhereInput!]
  OR: [PreferencesWhereInput!]
  NOT: [PreferencesWhereInput!]
}

input PreferencesWhereUniqueInput {
  id: ID
}

type Query {
  charge(where: ChargeWhereUniqueInput!): Charge
  charges(where: ChargeWhereInput, orderBy: ChargeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Charge]!
  chargesConnection(where: ChargeWhereInput, orderBy: ChargeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChargeConnection!
  charity(where: CharityWhereUniqueInput!): Charity
  charities(where: CharityWhereInput, orderBy: CharityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Charity]!
  charitiesConnection(where: CharityWhereInput, orderBy: CharityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CharityConnection!
  charityAuthHistory(where: CharityAuthHistoryWhereUniqueInput!): CharityAuthHistory
  charityAuthHistories(where: CharityAuthHistoryWhereInput, orderBy: CharityAuthHistoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CharityAuthHistory]!
  charityAuthHistoriesConnection(where: CharityAuthHistoryWhereInput, orderBy: CharityAuthHistoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CharityAuthHistoryConnection!
  circle(where: CircleWhereUniqueInput!): Circle
  circles(where: CircleWhereInput, orderBy: CircleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Circle]!
  circlesConnection(where: CircleWhereInput, orderBy: CircleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CircleConnection!
  circleInvite(where: CircleInviteWhereUniqueInput!): CircleInvite
  circleInvites(where: CircleInviteWhereInput, orderBy: CircleInviteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CircleInvite]!
  circleInvitesConnection(where: CircleInviteWhereInput, orderBy: CircleInviteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CircleInviteConnection!
  circleJoinRequest(where: CircleJoinRequestWhereUniqueInput!): CircleJoinRequest
  circleJoinRequests(where: CircleJoinRequestWhereInput, orderBy: CircleJoinRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CircleJoinRequest]!
  circleJoinRequestsConnection(where: CircleJoinRequestWhereInput, orderBy: CircleJoinRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CircleJoinRequestConnection!
  dot(where: DotWhereUniqueInput!): Dot
  dots(where: DotWhereInput, orderBy: DotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Dot]!
  dotsConnection(where: DotWhereInput, orderBy: DotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DotConnection!
  event(where: EventWhereUniqueInput!): Event
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  halo(where: HaloWhereUniqueInput!): Halo
  haloes(where: HaloWhereInput, orderBy: HaloOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Halo]!
  haloesConnection(where: HaloWhereInput, orderBy: HaloOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HaloConnection!
  identity(where: IdentityWhereUniqueInput!): Identity
  identities(where: IdentityWhereInput, orderBy: IdentityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Identity]!
  identitiesConnection(where: IdentityWhereInput, orderBy: IdentityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IdentityConnection!
  loop(where: LoopWhereUniqueInput!): Loop
  loops(where: LoopWhereInput, orderBy: LoopOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Loop]!
  loopsConnection(where: LoopWhereInput, orderBy: LoopOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LoopConnection!
  preferences(where: PreferencesWhereUniqueInput!): Preferences
  preferenceses(where: PreferencesWhereInput, orderBy: PreferencesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Preferences]!
  preferencesesConnection(where: PreferencesWhereInput, orderBy: PreferencesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PreferencesConnection!
  transaction(where: TransactionWhereUniqueInput!): Transaction
  transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction]!
  transactionsConnection(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TransactionConnection!
  transfer(where: TransferWhereUniqueInput!): Transfer
  transfers(where: TransferWhereInput, orderBy: TransferOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transfer]!
  transfersConnection(where: TransferWhereInput, orderBy: TransferOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TransferConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  charge(where: ChargeSubscriptionWhereInput): ChargeSubscriptionPayload
  charity(where: CharitySubscriptionWhereInput): CharitySubscriptionPayload
  charityAuthHistory(where: CharityAuthHistorySubscriptionWhereInput): CharityAuthHistorySubscriptionPayload
  circle(where: CircleSubscriptionWhereInput): CircleSubscriptionPayload
  circleInvite(where: CircleInviteSubscriptionWhereInput): CircleInviteSubscriptionPayload
  circleJoinRequest(where: CircleJoinRequestSubscriptionWhereInput): CircleJoinRequestSubscriptionPayload
  dot(where: DotSubscriptionWhereInput): DotSubscriptionPayload
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  halo(where: HaloSubscriptionWhereInput): HaloSubscriptionPayload
  identity(where: IdentitySubscriptionWhereInput): IdentitySubscriptionPayload
  loop(where: LoopSubscriptionWhereInput): LoopSubscriptionPayload
  preferences(where: PreferencesSubscriptionWhereInput): PreferencesSubscriptionPayload
  transaction(where: TransactionSubscriptionWhereInput): TransactionSubscriptionPayload
  transfer(where: TransferSubscriptionWhereInput): TransferSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Transaction {
  id: ID!
  createdAt: DateTime!
  balance: Int!
  donations(where: TransferWhereInput, orderBy: TransferOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transfer!]
  funds: Charge
  user: User!
}

type TransactionConnection {
  pageInfo: PageInfo!
  edges: [TransactionEdge]!
  aggregate: AggregateTransaction!
}

input TransactionCreateInput {
  id: ID
  balance: Int!
  donations: TransferCreateManyWithoutTransactionInput
  funds: ChargeCreateOneWithoutTransactionInput
  user: UserCreateOneWithoutTransactionsInput!
}

input TransactionCreateManyWithoutUserInput {
  create: [TransactionCreateWithoutUserInput!]
  connect: [TransactionWhereUniqueInput!]
}

input TransactionCreateOneWithoutDonationsInput {
  create: TransactionCreateWithoutDonationsInput
  connect: TransactionWhereUniqueInput
}

input TransactionCreateOneWithoutFundsInput {
  create: TransactionCreateWithoutFundsInput
  connect: TransactionWhereUniqueInput
}

input TransactionCreateWithoutDonationsInput {
  id: ID
  balance: Int!
  funds: ChargeCreateOneWithoutTransactionInput
  user: UserCreateOneWithoutTransactionsInput!
}

input TransactionCreateWithoutFundsInput {
  id: ID
  balance: Int!
  donations: TransferCreateManyWithoutTransactionInput
  user: UserCreateOneWithoutTransactionsInput!
}

input TransactionCreateWithoutUserInput {
  id: ID
  balance: Int!
  donations: TransferCreateManyWithoutTransactionInput
  funds: ChargeCreateOneWithoutTransactionInput
}

type TransactionEdge {
  node: Transaction!
  cursor: String!
}

enum TransactionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  balance_ASC
  balance_DESC
}

type TransactionPreviousValues {
  id: ID!
  createdAt: DateTime!
  balance: Int!
}

input TransactionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  balance: Int
  balance_not: Int
  balance_in: [Int!]
  balance_not_in: [Int!]
  balance_lt: Int
  balance_lte: Int
  balance_gt: Int
  balance_gte: Int
  AND: [TransactionScalarWhereInput!]
  OR: [TransactionScalarWhereInput!]
  NOT: [TransactionScalarWhereInput!]
}

type TransactionSubscriptionPayload {
  mutation: MutationType!
  node: Transaction
  updatedFields: [String!]
  previousValues: TransactionPreviousValues
}

input TransactionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TransactionWhereInput
  AND: [TransactionSubscriptionWhereInput!]
  OR: [TransactionSubscriptionWhereInput!]
  NOT: [TransactionSubscriptionWhereInput!]
}

input TransactionUpdateInput {
  balance: Int
  donations: TransferUpdateManyWithoutTransactionInput
  funds: ChargeUpdateOneWithoutTransactionInput
  user: UserUpdateOneRequiredWithoutTransactionsInput
}

input TransactionUpdateManyDataInput {
  balance: Int
}

input TransactionUpdateManyMutationInput {
  balance: Int
}

input TransactionUpdateManyWithoutUserInput {
  create: [TransactionCreateWithoutUserInput!]
  delete: [TransactionWhereUniqueInput!]
  connect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  disconnect: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [TransactionScalarWhereInput!]
  updateMany: [TransactionUpdateManyWithWhereNestedInput!]
}

input TransactionUpdateManyWithWhereNestedInput {
  where: TransactionScalarWhereInput!
  data: TransactionUpdateManyDataInput!
}

input TransactionUpdateOneRequiredWithoutDonationsInput {
  create: TransactionCreateWithoutDonationsInput
  update: TransactionUpdateWithoutDonationsDataInput
  upsert: TransactionUpsertWithoutDonationsInput
  connect: TransactionWhereUniqueInput
}

input TransactionUpdateOneRequiredWithoutFundsInput {
  create: TransactionCreateWithoutFundsInput
  update: TransactionUpdateWithoutFundsDataInput
  upsert: TransactionUpsertWithoutFundsInput
  connect: TransactionWhereUniqueInput
}

input TransactionUpdateWithoutDonationsDataInput {
  balance: Int
  funds: ChargeUpdateOneWithoutTransactionInput
  user: UserUpdateOneRequiredWithoutTransactionsInput
}

input TransactionUpdateWithoutFundsDataInput {
  balance: Int
  donations: TransferUpdateManyWithoutTransactionInput
  user: UserUpdateOneRequiredWithoutTransactionsInput
}

input TransactionUpdateWithoutUserDataInput {
  balance: Int
  donations: TransferUpdateManyWithoutTransactionInput
  funds: ChargeUpdateOneWithoutTransactionInput
}

input TransactionUpdateWithWhereUniqueWithoutUserInput {
  where: TransactionWhereUniqueInput!
  data: TransactionUpdateWithoutUserDataInput!
}

input TransactionUpsertWithoutDonationsInput {
  update: TransactionUpdateWithoutDonationsDataInput!
  create: TransactionCreateWithoutDonationsInput!
}

input TransactionUpsertWithoutFundsInput {
  update: TransactionUpdateWithoutFundsDataInput!
  create: TransactionCreateWithoutFundsInput!
}

input TransactionUpsertWithWhereUniqueWithoutUserInput {
  where: TransactionWhereUniqueInput!
  update: TransactionUpdateWithoutUserDataInput!
  create: TransactionCreateWithoutUserInput!
}

input TransactionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  balance: Int
  balance_not: Int
  balance_in: [Int!]
  balance_not_in: [Int!]
  balance_lt: Int
  balance_lte: Int
  balance_gt: Int
  balance_gte: Int
  donations_every: TransferWhereInput
  donations_some: TransferWhereInput
  donations_none: TransferWhereInput
  funds: ChargeWhereInput
  user: UserWhereInput
  AND: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  NOT: [TransactionWhereInput!]
}

input TransactionWhereUniqueInput {
  id: ID
}

type Transfer {
  id: ID!
  createdAt: DateTime!
  amount: Int!
  chargeBalance: Int!
  firstOfBatch: Boolean!
  transferID: String!
  event: Event
  source: Charge
  transaction: Transaction!
}

type TransferConnection {
  pageInfo: PageInfo!
  edges: [TransferEdge]!
  aggregate: AggregateTransfer!
}

input TransferCreateInput {
  id: ID
  amount: Int!
  chargeBalance: Int!
  firstOfBatch: Boolean!
  transferID: String!
  event: EventCreateOneWithoutDonationsInput
  source: ChargeCreateOneWithoutDonationsInput
  transaction: TransactionCreateOneWithoutDonationsInput!
}

input TransferCreateManyWithoutEventInput {
  create: [TransferCreateWithoutEventInput!]
  connect: [TransferWhereUniqueInput!]
}

input TransferCreateManyWithoutSourceInput {
  create: [TransferCreateWithoutSourceInput!]
  connect: [TransferWhereUniqueInput!]
}

input TransferCreateManyWithoutTransactionInput {
  create: [TransferCreateWithoutTransactionInput!]
  connect: [TransferWhereUniqueInput!]
}

input TransferCreateWithoutEventInput {
  id: ID
  amount: Int!
  chargeBalance: Int!
  firstOfBatch: Boolean!
  transferID: String!
  source: ChargeCreateOneWithoutDonationsInput
  transaction: TransactionCreateOneWithoutDonationsInput!
}

input TransferCreateWithoutSourceInput {
  id: ID
  amount: Int!
  chargeBalance: Int!
  firstOfBatch: Boolean!
  transferID: String!
  event: EventCreateOneWithoutDonationsInput
  transaction: TransactionCreateOneWithoutDonationsInput!
}

input TransferCreateWithoutTransactionInput {
  id: ID
  amount: Int!
  chargeBalance: Int!
  firstOfBatch: Boolean!
  transferID: String!
  event: EventCreateOneWithoutDonationsInput
  source: ChargeCreateOneWithoutDonationsInput
}

type TransferEdge {
  node: Transfer!
  cursor: String!
}

enum TransferOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  amount_ASC
  amount_DESC
  chargeBalance_ASC
  chargeBalance_DESC
  firstOfBatch_ASC
  firstOfBatch_DESC
  transferID_ASC
  transferID_DESC
}

type TransferPreviousValues {
  id: ID!
  createdAt: DateTime!
  amount: Int!
  chargeBalance: Int!
  firstOfBatch: Boolean!
  transferID: String!
}

input TransferScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  amount: Int
  amount_not: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  chargeBalance: Int
  chargeBalance_not: Int
  chargeBalance_in: [Int!]
  chargeBalance_not_in: [Int!]
  chargeBalance_lt: Int
  chargeBalance_lte: Int
  chargeBalance_gt: Int
  chargeBalance_gte: Int
  firstOfBatch: Boolean
  firstOfBatch_not: Boolean
  transferID: String
  transferID_not: String
  transferID_in: [String!]
  transferID_not_in: [String!]
  transferID_lt: String
  transferID_lte: String
  transferID_gt: String
  transferID_gte: String
  transferID_contains: String
  transferID_not_contains: String
  transferID_starts_with: String
  transferID_not_starts_with: String
  transferID_ends_with: String
  transferID_not_ends_with: String
  AND: [TransferScalarWhereInput!]
  OR: [TransferScalarWhereInput!]
  NOT: [TransferScalarWhereInput!]
}

type TransferSubscriptionPayload {
  mutation: MutationType!
  node: Transfer
  updatedFields: [String!]
  previousValues: TransferPreviousValues
}

input TransferSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TransferWhereInput
  AND: [TransferSubscriptionWhereInput!]
  OR: [TransferSubscriptionWhereInput!]
  NOT: [TransferSubscriptionWhereInput!]
}

input TransferUpdateInput {
  amount: Int
  chargeBalance: Int
  firstOfBatch: Boolean
  transferID: String
  event: EventUpdateOneWithoutDonationsInput
  source: ChargeUpdateOneWithoutDonationsInput
  transaction: TransactionUpdateOneRequiredWithoutDonationsInput
}

input TransferUpdateManyDataInput {
  amount: Int
  chargeBalance: Int
  firstOfBatch: Boolean
  transferID: String
}

input TransferUpdateManyMutationInput {
  amount: Int
  chargeBalance: Int
  firstOfBatch: Boolean
  transferID: String
}

input TransferUpdateManyWithoutEventInput {
  create: [TransferCreateWithoutEventInput!]
  delete: [TransferWhereUniqueInput!]
  connect: [TransferWhereUniqueInput!]
  set: [TransferWhereUniqueInput!]
  disconnect: [TransferWhereUniqueInput!]
  update: [TransferUpdateWithWhereUniqueWithoutEventInput!]
  upsert: [TransferUpsertWithWhereUniqueWithoutEventInput!]
  deleteMany: [TransferScalarWhereInput!]
  updateMany: [TransferUpdateManyWithWhereNestedInput!]
}

input TransferUpdateManyWithoutSourceInput {
  create: [TransferCreateWithoutSourceInput!]
  delete: [TransferWhereUniqueInput!]
  connect: [TransferWhereUniqueInput!]
  set: [TransferWhereUniqueInput!]
  disconnect: [TransferWhereUniqueInput!]
  update: [TransferUpdateWithWhereUniqueWithoutSourceInput!]
  upsert: [TransferUpsertWithWhereUniqueWithoutSourceInput!]
  deleteMany: [TransferScalarWhereInput!]
  updateMany: [TransferUpdateManyWithWhereNestedInput!]
}

input TransferUpdateManyWithoutTransactionInput {
  create: [TransferCreateWithoutTransactionInput!]
  delete: [TransferWhereUniqueInput!]
  connect: [TransferWhereUniqueInput!]
  set: [TransferWhereUniqueInput!]
  disconnect: [TransferWhereUniqueInput!]
  update: [TransferUpdateWithWhereUniqueWithoutTransactionInput!]
  upsert: [TransferUpsertWithWhereUniqueWithoutTransactionInput!]
  deleteMany: [TransferScalarWhereInput!]
  updateMany: [TransferUpdateManyWithWhereNestedInput!]
}

input TransferUpdateManyWithWhereNestedInput {
  where: TransferScalarWhereInput!
  data: TransferUpdateManyDataInput!
}

input TransferUpdateWithoutEventDataInput {
  amount: Int
  chargeBalance: Int
  firstOfBatch: Boolean
  transferID: String
  source: ChargeUpdateOneWithoutDonationsInput
  transaction: TransactionUpdateOneRequiredWithoutDonationsInput
}

input TransferUpdateWithoutSourceDataInput {
  amount: Int
  chargeBalance: Int
  firstOfBatch: Boolean
  transferID: String
  event: EventUpdateOneWithoutDonationsInput
  transaction: TransactionUpdateOneRequiredWithoutDonationsInput
}

input TransferUpdateWithoutTransactionDataInput {
  amount: Int
  chargeBalance: Int
  firstOfBatch: Boolean
  transferID: String
  event: EventUpdateOneWithoutDonationsInput
  source: ChargeUpdateOneWithoutDonationsInput
}

input TransferUpdateWithWhereUniqueWithoutEventInput {
  where: TransferWhereUniqueInput!
  data: TransferUpdateWithoutEventDataInput!
}

input TransferUpdateWithWhereUniqueWithoutSourceInput {
  where: TransferWhereUniqueInput!
  data: TransferUpdateWithoutSourceDataInput!
}

input TransferUpdateWithWhereUniqueWithoutTransactionInput {
  where: TransferWhereUniqueInput!
  data: TransferUpdateWithoutTransactionDataInput!
}

input TransferUpsertWithWhereUniqueWithoutEventInput {
  where: TransferWhereUniqueInput!
  update: TransferUpdateWithoutEventDataInput!
  create: TransferCreateWithoutEventInput!
}

input TransferUpsertWithWhereUniqueWithoutSourceInput {
  where: TransferWhereUniqueInput!
  update: TransferUpdateWithoutSourceDataInput!
  create: TransferCreateWithoutSourceInput!
}

input TransferUpsertWithWhereUniqueWithoutTransactionInput {
  where: TransferWhereUniqueInput!
  update: TransferUpdateWithoutTransactionDataInput!
  create: TransferCreateWithoutTransactionInput!
}

input TransferWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  amount: Int
  amount_not: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  chargeBalance: Int
  chargeBalance_not: Int
  chargeBalance_in: [Int!]
  chargeBalance_not_in: [Int!]
  chargeBalance_lt: Int
  chargeBalance_lte: Int
  chargeBalance_gt: Int
  chargeBalance_gte: Int
  firstOfBatch: Boolean
  firstOfBatch_not: Boolean
  transferID: String
  transferID_not: String
  transferID_in: [String!]
  transferID_not_in: [String!]
  transferID_lt: String
  transferID_lte: String
  transferID_gt: String
  transferID_gte: String
  transferID_contains: String
  transferID_not_contains: String
  transferID_starts_with: String
  transferID_not_starts_with: String
  transferID_ends_with: String
  transferID_not_ends_with: String
  event: EventWhereInput
  source: ChargeWhereInput
  transaction: TransactionWhereInput
  AND: [TransferWhereInput!]
  OR: [TransferWhereInput!]
  NOT: [TransferWhereInput!]
}

input TransferWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  bio: String
  email: String!
  nameFirst: String!
  nameLast: String!
  picture: String
  securityToken: Int!
  username: String!
  circleJoinRequests(where: CircleJoinRequestWhereInput, orderBy: CircleJoinRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CircleJoinRequest!]
  circleInvites(where: CircleInviteWhereInput, orderBy: CircleInviteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CircleInvite!]
  circles(where: CircleWhereInput, orderBy: CircleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Circle!]
  circlesOwned(where: CircleWhereInput, orderBy: CircleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Circle!]
  dots(where: DotWhereInput, orderBy: DotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Dot!]
  followedCharities(where: CharityWhereInput, orderBy: CharityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Charity!]
  funds(where: ChargeWhereInput, orderBy: ChargeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Charge!]
  halos(where: HaloWhereInput, orderBy: HaloOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Halo!]
  identity: Identity!
  loops(where: LoopWhereInput, orderBy: LoopOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Loop!]
  preferences: Preferences!
  transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  bio: String
  email: String!
  nameFirst: String!
  nameLast: String!
  picture: String
  securityToken: Int!
  username: String!
  circleJoinRequests: CircleJoinRequestCreateManyWithoutUserInput
  circleInvites: CircleInviteCreateManyWithoutUserInput
  circles: CircleCreateManyWithoutMembersInput
  circlesOwned: CircleCreateManyWithoutOwnerInput
  dots: DotCreateManyWithoutUserInput
  followedCharities: CharityCreateManyWithoutFollowersInput
  funds: ChargeCreateManyWithoutUserInput
  halos: HaloCreateManyWithoutUserInput
  identity: IdentityCreateOneWithoutUserInput!
  loops: LoopCreateManyWithoutUserInput
  preferences: PreferencesCreateOneWithoutUserInput!
  transactions: TransactionCreateManyWithoutUserInput
}

input UserCreateManyWithoutCirclesInput {
  create: [UserCreateWithoutCirclesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutFollowedCharitiesInput {
  create: [UserCreateWithoutFollowedCharitiesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutCircleInvitesInput {
  create: UserCreateWithoutCircleInvitesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCircleJoinRequestsInput {
  create: UserCreateWithoutCircleJoinRequestsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCirclesOwnedInput {
  create: UserCreateWithoutCirclesOwnedInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutDotsInput {
  create: UserCreateWithoutDotsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutFundsInput {
  create: UserCreateWithoutFundsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutHalosInput {
  create: UserCreateWithoutHalosInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutIdentityInput {
  create: UserCreateWithoutIdentityInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLoopsInput {
  create: UserCreateWithoutLoopsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPreferencesInput {
  create: UserCreateWithoutPreferencesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTransactionsInput {
  create: UserCreateWithoutTransactionsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCircleInvitesInput {
  id: ID
  bio: String
  email: String!
  nameFirst: String!
  nameLast: String!
  picture: String
  securityToken: Int!
  username: String!
  circleJoinRequests: CircleJoinRequestCreateManyWithoutUserInput
  circles: CircleCreateManyWithoutMembersInput
  circlesOwned: CircleCreateManyWithoutOwnerInput
  dots: DotCreateManyWithoutUserInput
  followedCharities: CharityCreateManyWithoutFollowersInput
  funds: ChargeCreateManyWithoutUserInput
  halos: HaloCreateManyWithoutUserInput
  identity: IdentityCreateOneWithoutUserInput!
  loops: LoopCreateManyWithoutUserInput
  preferences: PreferencesCreateOneWithoutUserInput!
  transactions: TransactionCreateManyWithoutUserInput
}

input UserCreateWithoutCircleJoinRequestsInput {
  id: ID
  bio: String
  email: String!
  nameFirst: String!
  nameLast: String!
  picture: String
  securityToken: Int!
  username: String!
  circleInvites: CircleInviteCreateManyWithoutUserInput
  circles: CircleCreateManyWithoutMembersInput
  circlesOwned: CircleCreateManyWithoutOwnerInput
  dots: DotCreateManyWithoutUserInput
  followedCharities: CharityCreateManyWithoutFollowersInput
  funds: ChargeCreateManyWithoutUserInput
  halos: HaloCreateManyWithoutUserInput
  identity: IdentityCreateOneWithoutUserInput!
  loops: LoopCreateManyWithoutUserInput
  preferences: PreferencesCreateOneWithoutUserInput!
  transactions: TransactionCreateManyWithoutUserInput
}

input UserCreateWithoutCirclesInput {
  id: ID
  bio: String
  email: String!
  nameFirst: String!
  nameLast: String!
  picture: String
  securityToken: Int!
  username: String!
  circleJoinRequests: CircleJoinRequestCreateManyWithoutUserInput
  circleInvites: CircleInviteCreateManyWithoutUserInput
  circlesOwned: CircleCreateManyWithoutOwnerInput
  dots: DotCreateManyWithoutUserInput
  followedCharities: CharityCreateManyWithoutFollowersInput
  funds: ChargeCreateManyWithoutUserInput
  halos: HaloCreateManyWithoutUserInput
  identity: IdentityCreateOneWithoutUserInput!
  loops: LoopCreateManyWithoutUserInput
  preferences: PreferencesCreateOneWithoutUserInput!
  transactions: TransactionCreateManyWithoutUserInput
}

input UserCreateWithoutCirclesOwnedInput {
  id: ID
  bio: String
  email: String!
  nameFirst: String!
  nameLast: String!
  picture: String
  securityToken: Int!
  username: String!
  circleJoinRequests: CircleJoinRequestCreateManyWithoutUserInput
  circleInvites: CircleInviteCreateManyWithoutUserInput
  circles: CircleCreateManyWithoutMembersInput
  dots: DotCreateManyWithoutUserInput
  followedCharities: CharityCreateManyWithoutFollowersInput
  funds: ChargeCreateManyWithoutUserInput
  halos: HaloCreateManyWithoutUserInput
  identity: IdentityCreateOneWithoutUserInput!
  loops: LoopCreateManyWithoutUserInput
  preferences: PreferencesCreateOneWithoutUserInput!
  transactions: TransactionCreateManyWithoutUserInput
}

input UserCreateWithoutDotsInput {
  id: ID
  bio: String
  email: String!
  nameFirst: String!
  nameLast: String!
  picture: String
  securityToken: Int!
  username: String!
  circleJoinRequests: CircleJoinRequestCreateManyWithoutUserInput
  circleInvites: CircleInviteCreateManyWithoutUserInput
  circles: CircleCreateManyWithoutMembersInput
  circlesOwned: CircleCreateManyWithoutOwnerInput
  followedCharities: CharityCreateManyWithoutFollowersInput
  funds: ChargeCreateManyWithoutUserInput
  halos: HaloCreateManyWithoutUserInput
  identity: IdentityCreateOneWithoutUserInput!
  loops: LoopCreateManyWithoutUserInput
  preferences: PreferencesCreateOneWithoutUserInput!
  transactions: TransactionCreateManyWithoutUserInput
}

input UserCreateWithoutFollowedCharitiesInput {
  id: ID
  bio: String
  email: String!
  nameFirst: String!
  nameLast: String!
  picture: String
  securityToken: Int!
  username: String!
  circleJoinRequests: CircleJoinRequestCreateManyWithoutUserInput
  circleInvites: CircleInviteCreateManyWithoutUserInput
  circles: CircleCreateManyWithoutMembersInput
  circlesOwned: CircleCreateManyWithoutOwnerInput
  dots: DotCreateManyWithoutUserInput
  funds: ChargeCreateManyWithoutUserInput
  halos: HaloCreateManyWithoutUserInput
  identity: IdentityCreateOneWithoutUserInput!
  loops: LoopCreateManyWithoutUserInput
  preferences: PreferencesCreateOneWithoutUserInput!
  transactions: TransactionCreateManyWithoutUserInput
}

input UserCreateWithoutFundsInput {
  id: ID
  bio: String
  email: String!
  nameFirst: String!
  nameLast: String!
  picture: String
  securityToken: Int!
  username: String!
  circleJoinRequests: CircleJoinRequestCreateManyWithoutUserInput
  circleInvites: CircleInviteCreateManyWithoutUserInput
  circles: CircleCreateManyWithoutMembersInput
  circlesOwned: CircleCreateManyWithoutOwnerInput
  dots: DotCreateManyWithoutUserInput
  followedCharities: CharityCreateManyWithoutFollowersInput
  halos: HaloCreateManyWithoutUserInput
  identity: IdentityCreateOneWithoutUserInput!
  loops: LoopCreateManyWithoutUserInput
  preferences: PreferencesCreateOneWithoutUserInput!
  transactions: TransactionCreateManyWithoutUserInput
}

input UserCreateWithoutHalosInput {
  id: ID
  bio: String
  email: String!
  nameFirst: String!
  nameLast: String!
  picture: String
  securityToken: Int!
  username: String!
  circleJoinRequests: CircleJoinRequestCreateManyWithoutUserInput
  circleInvites: CircleInviteCreateManyWithoutUserInput
  circles: CircleCreateManyWithoutMembersInput
  circlesOwned: CircleCreateManyWithoutOwnerInput
  dots: DotCreateManyWithoutUserInput
  followedCharities: CharityCreateManyWithoutFollowersInput
  funds: ChargeCreateManyWithoutUserInput
  identity: IdentityCreateOneWithoutUserInput!
  loops: LoopCreateManyWithoutUserInput
  preferences: PreferencesCreateOneWithoutUserInput!
  transactions: TransactionCreateManyWithoutUserInput
}

input UserCreateWithoutIdentityInput {
  id: ID
  bio: String
  email: String!
  nameFirst: String!
  nameLast: String!
  picture: String
  securityToken: Int!
  username: String!
  circleJoinRequests: CircleJoinRequestCreateManyWithoutUserInput
  circleInvites: CircleInviteCreateManyWithoutUserInput
  circles: CircleCreateManyWithoutMembersInput
  circlesOwned: CircleCreateManyWithoutOwnerInput
  dots: DotCreateManyWithoutUserInput
  followedCharities: CharityCreateManyWithoutFollowersInput
  funds: ChargeCreateManyWithoutUserInput
  halos: HaloCreateManyWithoutUserInput
  loops: LoopCreateManyWithoutUserInput
  preferences: PreferencesCreateOneWithoutUserInput!
  transactions: TransactionCreateManyWithoutUserInput
}

input UserCreateWithoutLoopsInput {
  id: ID
  bio: String
  email: String!
  nameFirst: String!
  nameLast: String!
  picture: String
  securityToken: Int!
  username: String!
  circleJoinRequests: CircleJoinRequestCreateManyWithoutUserInput
  circleInvites: CircleInviteCreateManyWithoutUserInput
  circles: CircleCreateManyWithoutMembersInput
  circlesOwned: CircleCreateManyWithoutOwnerInput
  dots: DotCreateManyWithoutUserInput
  followedCharities: CharityCreateManyWithoutFollowersInput
  funds: ChargeCreateManyWithoutUserInput
  halos: HaloCreateManyWithoutUserInput
  identity: IdentityCreateOneWithoutUserInput!
  preferences: PreferencesCreateOneWithoutUserInput!
  transactions: TransactionCreateManyWithoutUserInput
}

input UserCreateWithoutPreferencesInput {
  id: ID
  bio: String
  email: String!
  nameFirst: String!
  nameLast: String!
  picture: String
  securityToken: Int!
  username: String!
  circleJoinRequests: CircleJoinRequestCreateManyWithoutUserInput
  circleInvites: CircleInviteCreateManyWithoutUserInput
  circles: CircleCreateManyWithoutMembersInput
  circlesOwned: CircleCreateManyWithoutOwnerInput
  dots: DotCreateManyWithoutUserInput
  followedCharities: CharityCreateManyWithoutFollowersInput
  funds: ChargeCreateManyWithoutUserInput
  halos: HaloCreateManyWithoutUserInput
  identity: IdentityCreateOneWithoutUserInput!
  loops: LoopCreateManyWithoutUserInput
  transactions: TransactionCreateManyWithoutUserInput
}

input UserCreateWithoutTransactionsInput {
  id: ID
  bio: String
  email: String!
  nameFirst: String!
  nameLast: String!
  picture: String
  securityToken: Int!
  username: String!
  circleJoinRequests: CircleJoinRequestCreateManyWithoutUserInput
  circleInvites: CircleInviteCreateManyWithoutUserInput
  circles: CircleCreateManyWithoutMembersInput
  circlesOwned: CircleCreateManyWithoutOwnerInput
  dots: DotCreateManyWithoutUserInput
  followedCharities: CharityCreateManyWithoutFollowersInput
  funds: ChargeCreateManyWithoutUserInput
  halos: HaloCreateManyWithoutUserInput
  identity: IdentityCreateOneWithoutUserInput!
  loops: LoopCreateManyWithoutUserInput
  preferences: PreferencesCreateOneWithoutUserInput!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  bio_ASC
  bio_DESC
  email_ASC
  email_DESC
  nameFirst_ASC
  nameFirst_DESC
  nameLast_ASC
  nameLast_DESC
  picture_ASC
  picture_DESC
  securityToken_ASC
  securityToken_DESC
  username_ASC
  username_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  bio: String
  email: String!
  nameFirst: String!
  nameLast: String!
  picture: String
  securityToken: Int!
  username: String!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  bio: String
  bio_not: String
  bio_in: [String!]
  bio_not_in: [String!]
  bio_lt: String
  bio_lte: String
  bio_gt: String
  bio_gte: String
  bio_contains: String
  bio_not_contains: String
  bio_starts_with: String
  bio_not_starts_with: String
  bio_ends_with: String
  bio_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  nameFirst: String
  nameFirst_not: String
  nameFirst_in: [String!]
  nameFirst_not_in: [String!]
  nameFirst_lt: String
  nameFirst_lte: String
  nameFirst_gt: String
  nameFirst_gte: String
  nameFirst_contains: String
  nameFirst_not_contains: String
  nameFirst_starts_with: String
  nameFirst_not_starts_with: String
  nameFirst_ends_with: String
  nameFirst_not_ends_with: String
  nameLast: String
  nameLast_not: String
  nameLast_in: [String!]
  nameLast_not_in: [String!]
  nameLast_lt: String
  nameLast_lte: String
  nameLast_gt: String
  nameLast_gte: String
  nameLast_contains: String
  nameLast_not_contains: String
  nameLast_starts_with: String
  nameLast_not_starts_with: String
  nameLast_ends_with: String
  nameLast_not_ends_with: String
  picture: String
  picture_not: String
  picture_in: [String!]
  picture_not_in: [String!]
  picture_lt: String
  picture_lte: String
  picture_gt: String
  picture_gte: String
  picture_contains: String
  picture_not_contains: String
  picture_starts_with: String
  picture_not_starts_with: String
  picture_ends_with: String
  picture_not_ends_with: String
  securityToken: Int
  securityToken_not: Int
  securityToken_in: [Int!]
  securityToken_not_in: [Int!]
  securityToken_lt: Int
  securityToken_lte: Int
  securityToken_gt: Int
  securityToken_gte: Int
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  bio: String
  email: String
  nameFirst: String
  nameLast: String
  picture: String
  securityToken: Int
  username: String
  circleJoinRequests: CircleJoinRequestUpdateManyWithoutUserInput
  circleInvites: CircleInviteUpdateManyWithoutUserInput
  circles: CircleUpdateManyWithoutMembersInput
  circlesOwned: CircleUpdateManyWithoutOwnerInput
  dots: DotUpdateManyWithoutUserInput
  followedCharities: CharityUpdateManyWithoutFollowersInput
  funds: ChargeUpdateManyWithoutUserInput
  halos: HaloUpdateManyWithoutUserInput
  identity: IdentityUpdateOneRequiredWithoutUserInput
  loops: LoopUpdateManyWithoutUserInput
  preferences: PreferencesUpdateOneRequiredWithoutUserInput
  transactions: TransactionUpdateManyWithoutUserInput
}

input UserUpdateManyDataInput {
  bio: String
  email: String
  nameFirst: String
  nameLast: String
  picture: String
  securityToken: Int
  username: String
}

input UserUpdateManyMutationInput {
  bio: String
  email: String
  nameFirst: String
  nameLast: String
  picture: String
  securityToken: Int
  username: String
}

input UserUpdateManyWithoutCirclesInput {
  create: [UserCreateWithoutCirclesInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutCirclesInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutCirclesInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutFollowedCharitiesInput {
  create: [UserCreateWithoutFollowedCharitiesInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowedCharitiesInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowedCharitiesInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutCircleInvitesInput {
  create: UserCreateWithoutCircleInvitesInput
  update: UserUpdateWithoutCircleInvitesDataInput
  upsert: UserUpsertWithoutCircleInvitesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutCircleJoinRequestsInput {
  create: UserCreateWithoutCircleJoinRequestsInput
  update: UserUpdateWithoutCircleJoinRequestsDataInput
  upsert: UserUpsertWithoutCircleJoinRequestsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutCirclesOwnedInput {
  create: UserCreateWithoutCirclesOwnedInput
  update: UserUpdateWithoutCirclesOwnedDataInput
  upsert: UserUpsertWithoutCirclesOwnedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutDotsInput {
  create: UserCreateWithoutDotsInput
  update: UserUpdateWithoutDotsDataInput
  upsert: UserUpsertWithoutDotsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutFundsInput {
  create: UserCreateWithoutFundsInput
  update: UserUpdateWithoutFundsDataInput
  upsert: UserUpsertWithoutFundsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutHalosInput {
  create: UserCreateWithoutHalosInput
  update: UserUpdateWithoutHalosDataInput
  upsert: UserUpsertWithoutHalosInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutIdentityInput {
  create: UserCreateWithoutIdentityInput
  update: UserUpdateWithoutIdentityDataInput
  upsert: UserUpsertWithoutIdentityInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutLoopsInput {
  create: UserCreateWithoutLoopsInput
  update: UserUpdateWithoutLoopsDataInput
  upsert: UserUpsertWithoutLoopsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutPreferencesInput {
  create: UserCreateWithoutPreferencesInput
  update: UserUpdateWithoutPreferencesDataInput
  upsert: UserUpsertWithoutPreferencesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutTransactionsInput {
  create: UserCreateWithoutTransactionsInput
  update: UserUpdateWithoutTransactionsDataInput
  upsert: UserUpsertWithoutTransactionsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCircleInvitesDataInput {
  bio: String
  email: String
  nameFirst: String
  nameLast: String
  picture: String
  securityToken: Int
  username: String
  circleJoinRequests: CircleJoinRequestUpdateManyWithoutUserInput
  circles: CircleUpdateManyWithoutMembersInput
  circlesOwned: CircleUpdateManyWithoutOwnerInput
  dots: DotUpdateManyWithoutUserInput
  followedCharities: CharityUpdateManyWithoutFollowersInput
  funds: ChargeUpdateManyWithoutUserInput
  halos: HaloUpdateManyWithoutUserInput
  identity: IdentityUpdateOneRequiredWithoutUserInput
  loops: LoopUpdateManyWithoutUserInput
  preferences: PreferencesUpdateOneRequiredWithoutUserInput
  transactions: TransactionUpdateManyWithoutUserInput
}

input UserUpdateWithoutCircleJoinRequestsDataInput {
  bio: String
  email: String
  nameFirst: String
  nameLast: String
  picture: String
  securityToken: Int
  username: String
  circleInvites: CircleInviteUpdateManyWithoutUserInput
  circles: CircleUpdateManyWithoutMembersInput
  circlesOwned: CircleUpdateManyWithoutOwnerInput
  dots: DotUpdateManyWithoutUserInput
  followedCharities: CharityUpdateManyWithoutFollowersInput
  funds: ChargeUpdateManyWithoutUserInput
  halos: HaloUpdateManyWithoutUserInput
  identity: IdentityUpdateOneRequiredWithoutUserInput
  loops: LoopUpdateManyWithoutUserInput
  preferences: PreferencesUpdateOneRequiredWithoutUserInput
  transactions: TransactionUpdateManyWithoutUserInput
}

input UserUpdateWithoutCirclesDataInput {
  bio: String
  email: String
  nameFirst: String
  nameLast: String
  picture: String
  securityToken: Int
  username: String
  circleJoinRequests: CircleJoinRequestUpdateManyWithoutUserInput
  circleInvites: CircleInviteUpdateManyWithoutUserInput
  circlesOwned: CircleUpdateManyWithoutOwnerInput
  dots: DotUpdateManyWithoutUserInput
  followedCharities: CharityUpdateManyWithoutFollowersInput
  funds: ChargeUpdateManyWithoutUserInput
  halos: HaloUpdateManyWithoutUserInput
  identity: IdentityUpdateOneRequiredWithoutUserInput
  loops: LoopUpdateManyWithoutUserInput
  preferences: PreferencesUpdateOneRequiredWithoutUserInput
  transactions: TransactionUpdateManyWithoutUserInput
}

input UserUpdateWithoutCirclesOwnedDataInput {
  bio: String
  email: String
  nameFirst: String
  nameLast: String
  picture: String
  securityToken: Int
  username: String
  circleJoinRequests: CircleJoinRequestUpdateManyWithoutUserInput
  circleInvites: CircleInviteUpdateManyWithoutUserInput
  circles: CircleUpdateManyWithoutMembersInput
  dots: DotUpdateManyWithoutUserInput
  followedCharities: CharityUpdateManyWithoutFollowersInput
  funds: ChargeUpdateManyWithoutUserInput
  halos: HaloUpdateManyWithoutUserInput
  identity: IdentityUpdateOneRequiredWithoutUserInput
  loops: LoopUpdateManyWithoutUserInput
  preferences: PreferencesUpdateOneRequiredWithoutUserInput
  transactions: TransactionUpdateManyWithoutUserInput
}

input UserUpdateWithoutDotsDataInput {
  bio: String
  email: String
  nameFirst: String
  nameLast: String
  picture: String
  securityToken: Int
  username: String
  circleJoinRequests: CircleJoinRequestUpdateManyWithoutUserInput
  circleInvites: CircleInviteUpdateManyWithoutUserInput
  circles: CircleUpdateManyWithoutMembersInput
  circlesOwned: CircleUpdateManyWithoutOwnerInput
  followedCharities: CharityUpdateManyWithoutFollowersInput
  funds: ChargeUpdateManyWithoutUserInput
  halos: HaloUpdateManyWithoutUserInput
  identity: IdentityUpdateOneRequiredWithoutUserInput
  loops: LoopUpdateManyWithoutUserInput
  preferences: PreferencesUpdateOneRequiredWithoutUserInput
  transactions: TransactionUpdateManyWithoutUserInput
}

input UserUpdateWithoutFollowedCharitiesDataInput {
  bio: String
  email: String
  nameFirst: String
  nameLast: String
  picture: String
  securityToken: Int
  username: String
  circleJoinRequests: CircleJoinRequestUpdateManyWithoutUserInput
  circleInvites: CircleInviteUpdateManyWithoutUserInput
  circles: CircleUpdateManyWithoutMembersInput
  circlesOwned: CircleUpdateManyWithoutOwnerInput
  dots: DotUpdateManyWithoutUserInput
  funds: ChargeUpdateManyWithoutUserInput
  halos: HaloUpdateManyWithoutUserInput
  identity: IdentityUpdateOneRequiredWithoutUserInput
  loops: LoopUpdateManyWithoutUserInput
  preferences: PreferencesUpdateOneRequiredWithoutUserInput
  transactions: TransactionUpdateManyWithoutUserInput
}

input UserUpdateWithoutFundsDataInput {
  bio: String
  email: String
  nameFirst: String
  nameLast: String
  picture: String
  securityToken: Int
  username: String
  circleJoinRequests: CircleJoinRequestUpdateManyWithoutUserInput
  circleInvites: CircleInviteUpdateManyWithoutUserInput
  circles: CircleUpdateManyWithoutMembersInput
  circlesOwned: CircleUpdateManyWithoutOwnerInput
  dots: DotUpdateManyWithoutUserInput
  followedCharities: CharityUpdateManyWithoutFollowersInput
  halos: HaloUpdateManyWithoutUserInput
  identity: IdentityUpdateOneRequiredWithoutUserInput
  loops: LoopUpdateManyWithoutUserInput
  preferences: PreferencesUpdateOneRequiredWithoutUserInput
  transactions: TransactionUpdateManyWithoutUserInput
}

input UserUpdateWithoutHalosDataInput {
  bio: String
  email: String
  nameFirst: String
  nameLast: String
  picture: String
  securityToken: Int
  username: String
  circleJoinRequests: CircleJoinRequestUpdateManyWithoutUserInput
  circleInvites: CircleInviteUpdateManyWithoutUserInput
  circles: CircleUpdateManyWithoutMembersInput
  circlesOwned: CircleUpdateManyWithoutOwnerInput
  dots: DotUpdateManyWithoutUserInput
  followedCharities: CharityUpdateManyWithoutFollowersInput
  funds: ChargeUpdateManyWithoutUserInput
  identity: IdentityUpdateOneRequiredWithoutUserInput
  loops: LoopUpdateManyWithoutUserInput
  preferences: PreferencesUpdateOneRequiredWithoutUserInput
  transactions: TransactionUpdateManyWithoutUserInput
}

input UserUpdateWithoutIdentityDataInput {
  bio: String
  email: String
  nameFirst: String
  nameLast: String
  picture: String
  securityToken: Int
  username: String
  circleJoinRequests: CircleJoinRequestUpdateManyWithoutUserInput
  circleInvites: CircleInviteUpdateManyWithoutUserInput
  circles: CircleUpdateManyWithoutMembersInput
  circlesOwned: CircleUpdateManyWithoutOwnerInput
  dots: DotUpdateManyWithoutUserInput
  followedCharities: CharityUpdateManyWithoutFollowersInput
  funds: ChargeUpdateManyWithoutUserInput
  halos: HaloUpdateManyWithoutUserInput
  loops: LoopUpdateManyWithoutUserInput
  preferences: PreferencesUpdateOneRequiredWithoutUserInput
  transactions: TransactionUpdateManyWithoutUserInput
}

input UserUpdateWithoutLoopsDataInput {
  bio: String
  email: String
  nameFirst: String
  nameLast: String
  picture: String
  securityToken: Int
  username: String
  circleJoinRequests: CircleJoinRequestUpdateManyWithoutUserInput
  circleInvites: CircleInviteUpdateManyWithoutUserInput
  circles: CircleUpdateManyWithoutMembersInput
  circlesOwned: CircleUpdateManyWithoutOwnerInput
  dots: DotUpdateManyWithoutUserInput
  followedCharities: CharityUpdateManyWithoutFollowersInput
  funds: ChargeUpdateManyWithoutUserInput
  halos: HaloUpdateManyWithoutUserInput
  identity: IdentityUpdateOneRequiredWithoutUserInput
  preferences: PreferencesUpdateOneRequiredWithoutUserInput
  transactions: TransactionUpdateManyWithoutUserInput
}

input UserUpdateWithoutPreferencesDataInput {
  bio: String
  email: String
  nameFirst: String
  nameLast: String
  picture: String
  securityToken: Int
  username: String
  circleJoinRequests: CircleJoinRequestUpdateManyWithoutUserInput
  circleInvites: CircleInviteUpdateManyWithoutUserInput
  circles: CircleUpdateManyWithoutMembersInput
  circlesOwned: CircleUpdateManyWithoutOwnerInput
  dots: DotUpdateManyWithoutUserInput
  followedCharities: CharityUpdateManyWithoutFollowersInput
  funds: ChargeUpdateManyWithoutUserInput
  halos: HaloUpdateManyWithoutUserInput
  identity: IdentityUpdateOneRequiredWithoutUserInput
  loops: LoopUpdateManyWithoutUserInput
  transactions: TransactionUpdateManyWithoutUserInput
}

input UserUpdateWithoutTransactionsDataInput {
  bio: String
  email: String
  nameFirst: String
  nameLast: String
  picture: String
  securityToken: Int
  username: String
  circleJoinRequests: CircleJoinRequestUpdateManyWithoutUserInput
  circleInvites: CircleInviteUpdateManyWithoutUserInput
  circles: CircleUpdateManyWithoutMembersInput
  circlesOwned: CircleUpdateManyWithoutOwnerInput
  dots: DotUpdateManyWithoutUserInput
  followedCharities: CharityUpdateManyWithoutFollowersInput
  funds: ChargeUpdateManyWithoutUserInput
  halos: HaloUpdateManyWithoutUserInput
  identity: IdentityUpdateOneRequiredWithoutUserInput
  loops: LoopUpdateManyWithoutUserInput
  preferences: PreferencesUpdateOneRequiredWithoutUserInput
}

input UserUpdateWithWhereUniqueWithoutCirclesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutCirclesDataInput!
}

input UserUpdateWithWhereUniqueWithoutFollowedCharitiesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFollowedCharitiesDataInput!
}

input UserUpsertWithoutCircleInvitesInput {
  update: UserUpdateWithoutCircleInvitesDataInput!
  create: UserCreateWithoutCircleInvitesInput!
}

input UserUpsertWithoutCircleJoinRequestsInput {
  update: UserUpdateWithoutCircleJoinRequestsDataInput!
  create: UserCreateWithoutCircleJoinRequestsInput!
}

input UserUpsertWithoutCirclesOwnedInput {
  update: UserUpdateWithoutCirclesOwnedDataInput!
  create: UserCreateWithoutCirclesOwnedInput!
}

input UserUpsertWithoutDotsInput {
  update: UserUpdateWithoutDotsDataInput!
  create: UserCreateWithoutDotsInput!
}

input UserUpsertWithoutFundsInput {
  update: UserUpdateWithoutFundsDataInput!
  create: UserCreateWithoutFundsInput!
}

input UserUpsertWithoutHalosInput {
  update: UserUpdateWithoutHalosDataInput!
  create: UserCreateWithoutHalosInput!
}

input UserUpsertWithoutIdentityInput {
  update: UserUpdateWithoutIdentityDataInput!
  create: UserCreateWithoutIdentityInput!
}

input UserUpsertWithoutLoopsInput {
  update: UserUpdateWithoutLoopsDataInput!
  create: UserCreateWithoutLoopsInput!
}

input UserUpsertWithoutPreferencesInput {
  update: UserUpdateWithoutPreferencesDataInput!
  create: UserCreateWithoutPreferencesInput!
}

input UserUpsertWithoutTransactionsInput {
  update: UserUpdateWithoutTransactionsDataInput!
  create: UserCreateWithoutTransactionsInput!
}

input UserUpsertWithWhereUniqueWithoutCirclesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutCirclesDataInput!
  create: UserCreateWithoutCirclesInput!
}

input UserUpsertWithWhereUniqueWithoutFollowedCharitiesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFollowedCharitiesDataInput!
  create: UserCreateWithoutFollowedCharitiesInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  bio: String
  bio_not: String
  bio_in: [String!]
  bio_not_in: [String!]
  bio_lt: String
  bio_lte: String
  bio_gt: String
  bio_gte: String
  bio_contains: String
  bio_not_contains: String
  bio_starts_with: String
  bio_not_starts_with: String
  bio_ends_with: String
  bio_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  nameFirst: String
  nameFirst_not: String
  nameFirst_in: [String!]
  nameFirst_not_in: [String!]
  nameFirst_lt: String
  nameFirst_lte: String
  nameFirst_gt: String
  nameFirst_gte: String
  nameFirst_contains: String
  nameFirst_not_contains: String
  nameFirst_starts_with: String
  nameFirst_not_starts_with: String
  nameFirst_ends_with: String
  nameFirst_not_ends_with: String
  nameLast: String
  nameLast_not: String
  nameLast_in: [String!]
  nameLast_not_in: [String!]
  nameLast_lt: String
  nameLast_lte: String
  nameLast_gt: String
  nameLast_gte: String
  nameLast_contains: String
  nameLast_not_contains: String
  nameLast_starts_with: String
  nameLast_not_starts_with: String
  nameLast_ends_with: String
  nameLast_not_ends_with: String
  picture: String
  picture_not: String
  picture_in: [String!]
  picture_not_in: [String!]
  picture_lt: String
  picture_lte: String
  picture_gt: String
  picture_gte: String
  picture_contains: String
  picture_not_contains: String
  picture_starts_with: String
  picture_not_starts_with: String
  picture_ends_with: String
  picture_not_ends_with: String
  securityToken: Int
  securityToken_not: Int
  securityToken_in: [Int!]
  securityToken_not_in: [Int!]
  securityToken_lt: Int
  securityToken_lte: Int
  securityToken_gt: Int
  securityToken_gte: Int
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  circleJoinRequests_every: CircleJoinRequestWhereInput
  circleJoinRequests_some: CircleJoinRequestWhereInput
  circleJoinRequests_none: CircleJoinRequestWhereInput
  circleInvites_every: CircleInviteWhereInput
  circleInvites_some: CircleInviteWhereInput
  circleInvites_none: CircleInviteWhereInput
  circles_every: CircleWhereInput
  circles_some: CircleWhereInput
  circles_none: CircleWhereInput
  circlesOwned_every: CircleWhereInput
  circlesOwned_some: CircleWhereInput
  circlesOwned_none: CircleWhereInput
  dots_every: DotWhereInput
  dots_some: DotWhereInput
  dots_none: DotWhereInput
  followedCharities_every: CharityWhereInput
  followedCharities_some: CharityWhereInput
  followedCharities_none: CharityWhereInput
  funds_every: ChargeWhereInput
  funds_some: ChargeWhereInput
  funds_none: ChargeWhereInput
  halos_every: HaloWhereInput
  halos_some: HaloWhereInput
  halos_none: HaloWhereInput
  identity: IdentityWhereInput
  loops_every: LoopWhereInput
  loops_some: LoopWhereInput
  loops_none: LoopWhereInput
  preferences: PreferencesWhereInput
  transactions_every: TransactionWhereInput
  transactions_some: TransactionWhereInput
  transactions_none: TransactionWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
}
`
      }
    